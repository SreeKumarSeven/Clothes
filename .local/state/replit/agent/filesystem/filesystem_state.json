{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a full-stack e-commerce platform called \"StyleHub\" built with a modern tech stack. The application provides a comprehensive online clothing store with user authentication, product management, shopping cart functionality, order processing, payment integration, and administrative features. It's designed as a single-page application (SPA) with a React frontend and Express.js backend, featuring a clean, modern UI built with Tailwind CSS and shadcn/ui components.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **Routing**: Wouter for client-side routing with separate routes for authenticated and unauthenticated users\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **UI Framework**: shadcn/ui components built on Radix UI primitives with Tailwind CSS for styling\n- **Forms**: React Hook Form with Zod validation for type-safe form handling\n- **Authentication Flow**: Conditional rendering based on authentication status with automatic redirects\n\n## Backend Architecture\n- **Framework**: Express.js with TypeScript running on Node.js\n- **Database ORM**: Drizzle ORM with PostgreSQL for type-safe database operations\n- **API Design**: RESTful API with consistent error handling and request/response logging\n- **Authentication**: Replit Auth integration using OpenID Connect with session-based authentication\n- **Session Management**: PostgreSQL-backed sessions using connect-pg-simple\n- **File Structure**: Modular architecture with separate routing, storage, and database layers\n\n## Database Design\n- **Primary Database**: PostgreSQL with Neon serverless hosting\n- **Schema Management**: Drizzle ORM with migration support\n- **Key Entities**: Users, Products, Orders, Cart Items, Wishlist, Reviews, Order Tracking\n- **Session Storage**: Dedicated sessions table for authentication state persistence\n- **Relationships**: Proper foreign key relationships between users, products, orders, and related entities\n\n## Authentication & Authorization\n- **Provider**: Replit Auth using OpenID Connect protocol\n- **Session Management**: Server-side sessions stored in PostgreSQL\n- **Security**: HTTPS-only cookies with proper session expiration\n- **Access Control**: Route-level authentication checks with automatic login redirects\n- **User Management**: Mandatory user storage integration for Replit Auth compliance\n\n## API Structure\n- **Product Management**: CRUD operations for products with category filtering and search\n- **Cart Operations**: Add/remove items, quantity updates, persistent cart state\n- **Order Processing**: Order creation, tracking, and status updates\n- **User Features**: Wishlist management, order history, user profile\n- **Admin Features**: Product management, order fulfillment, analytics dashboard\n\n# External Dependencies\n\n## Core Services\n- **Neon Database**: Serverless PostgreSQL hosting for production data storage\n- **Replit Auth**: Integrated authentication service using OpenID Connect\n- **Stripe**: Payment processing integration for checkout and transactions\n\n## Development Tools\n- **Vite**: Fast build tool and development server with Hot Module Replacement\n- **TypeScript**: Type safety across the entire application stack\n- **Drizzle Kit**: Database migration and schema management tools\n\n## UI/UX Libraries\n- **Tailwind CSS**: Utility-first CSS framework for responsive design\n- **Radix UI**: Headless component primitives for accessibility\n- **Lucide React**: Icon library for consistent iconography\n- **React Hook Form**: Performant form handling with minimal re-renders\n\n## Data Management\n- **TanStack Query**: Server state management with intelligent caching\n- **Zod**: Runtime type validation for forms and API responses\n- **Date-fns**: Date manipulation and formatting utilities\n\n## Production Infrastructure\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **Express Session**: Session middleware with PostgreSQL persistence\n- **Replit Platform**: Deployment and hosting environment with development tooling","size_bytes":4180},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport {\n  insertProductSchema,\n  insertCartItemSchema,\n  insertOrderSchema,\n  insertOrderItemSchema,\n  insertWishlistItemSchema,\n  insertReviewSchema,\n} from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Product routes\n  app.get('/api/products', async (req, res) => {\n    try {\n      const { category, search, featured, limit, offset } = req.query;\n      const products = await storage.getProducts({\n        category: category as string,\n        search: search as string,\n        featured: featured === 'true',\n        limit: limit ? parseInt(limit as string) : undefined,\n        offset: offset ? parseInt(offset as string) : undefined,\n      });\n      res.json(products);\n    } catch (error) {\n      console.error(\"Error fetching products:\", error);\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  app.get('/api/products/:id', async (req, res) => {\n    try {\n      const product = await storage.getProduct(req.params.id);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error fetching product:\", error);\n      res.status(500).json({ message: \"Failed to fetch product\" });\n    }\n  });\n\n  app.post('/api/products', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const validatedData = insertProductSchema.parse(req.body);\n      const product = await storage.createProduct(validatedData);\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error creating product:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid product data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create product\" });\n    }\n  });\n\n  app.put('/api/products/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const validatedData = insertProductSchema.partial().parse(req.body);\n      const product = await storage.updateProduct(req.params.id, validatedData);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error updating product:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid product data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update product\" });\n    }\n  });\n\n  app.delete('/api/products/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const success = await storage.deleteProduct(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json({ message: \"Product deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting product:\", error);\n      res.status(500).json({ message: \"Failed to delete product\" });\n    }\n  });\n\n  // Cart routes\n  app.get('/api/cart', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const cartItems = await storage.getCartItems(userId);\n      res.json(cartItems);\n    } catch (error) {\n      console.error(\"Error fetching cart:\", error);\n      res.status(500).json({ message: \"Failed to fetch cart\" });\n    }\n  });\n\n  app.post('/api/cart', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const validatedData = insertCartItemSchema.parse({ ...req.body, userId });\n      const cartItem = await storage.addToCart(validatedData);\n      res.json(cartItem);\n    } catch (error) {\n      console.error(\"Error adding to cart:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid cart data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to add to cart\" });\n    }\n  });\n\n  app.put('/api/cart/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { quantity } = req.body;\n      const cartItem = await storage.updateCartItem(req.params.id, quantity);\n      if (!cartItem) {\n        return res.status(404).json({ message: \"Cart item not found\" });\n      }\n      res.json(cartItem);\n    } catch (error) {\n      console.error(\"Error updating cart item:\", error);\n      res.status(500).json({ message: \"Failed to update cart item\" });\n    }\n  });\n\n  app.delete('/api/cart/:id', isAuthenticated, async (req, res) => {\n    try {\n      const success = await storage.removeFromCart(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Cart item not found\" });\n      }\n      res.json({ message: \"Item removed from cart\" });\n    } catch (error) {\n      console.error(\"Error removing from cart:\", error);\n      res.status(500).json({ message: \"Failed to remove from cart\" });\n    }\n  });\n\n  app.delete('/api/cart', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      await storage.clearCart(userId);\n      res.json({ message: \"Cart cleared\" });\n    } catch (error) {\n      console.error(\"Error clearing cart:\", error);\n      res.status(500).json({ message: \"Failed to clear cart\" });\n    }\n  });\n\n  // Order routes\n  app.post('/api/orders', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { shippingAddress, paymentMethod, items } = req.body;\n      \n      // Calculate total amount\n      const totalAmount = items.reduce((sum: number, item: any) => sum + (item.price * item.quantity), 0);\n      \n      const orderData = {\n        userId,\n        totalAmount: totalAmount.toString(),\n        shippingAddress,\n        paymentMethod,\n        status: 'pending' as const,\n        paymentStatus: 'pending',\n      };\n\n      const validatedOrder = insertOrderSchema.parse(orderData);\n      const validatedItems = items.map((item: any) => insertOrderItemSchema.parse(item));\n      \n      const order = await storage.createOrder(validatedOrder, validatedItems);\n      \n      // Clear cart after successful order\n      await storage.clearCart(userId);\n      \n      res.json(order);\n    } catch (error) {\n      console.error(\"Error creating order:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid order data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create order\" });\n    }\n  });\n\n  app.get('/api/orders', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const orders = await storage.getOrders(userId);\n      res.json(orders);\n    } catch (error) {\n      console.error(\"Error fetching orders:\", error);\n      res.status(500).json({ message: \"Failed to fetch orders\" });\n    }\n  });\n\n  app.get('/api/orders/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const order = await storage.getOrder(req.params.id);\n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n      \n      // Check if user owns this order or is admin\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      if (order.userId !== userId && !user?.isAdmin) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      res.json(order);\n    } catch (error) {\n      console.error(\"Error fetching order:\", error);\n      res.status(500).json({ message: \"Failed to fetch order\" });\n    }\n  });\n\n  app.put('/api/orders/:id/status', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { status } = req.body;\n      const order = await storage.updateOrderStatus(req.params.id, status);\n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n      res.json(order);\n    } catch (error) {\n      console.error(\"Error updating order status:\", error);\n      res.status(500).json({ message: \"Failed to update order status\" });\n    }\n  });\n\n  // Order tracking routes\n  app.get('/api/track/:orderNumber', async (req, res) => {\n    try {\n      const order = await storage.getOrderByNumber(req.params.orderNumber);\n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n      res.json(order);\n    } catch (error) {\n      console.error(\"Error tracking order:\", error);\n      res.status(500).json({ message: \"Failed to track order\" });\n    }\n  });\n\n  app.post('/api/orders/:id/tracking', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const trackingData = { ...req.body, orderId: req.params.id };\n      const tracking = await storage.addOrderTracking(trackingData);\n      res.json(tracking);\n    } catch (error) {\n      console.error(\"Error adding tracking:\", error);\n      res.status(500).json({ message: \"Failed to add tracking\" });\n    }\n  });\n\n  // Wishlist routes\n  app.get('/api/wishlist', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const wishlist = await storage.getWishlist(userId);\n      res.json(wishlist);\n    } catch (error) {\n      console.error(\"Error fetching wishlist:\", error);\n      res.status(500).json({ message: \"Failed to fetch wishlist\" });\n    }\n  });\n\n  app.post('/api/wishlist', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const validatedData = insertWishlistItemSchema.parse({ ...req.body, userId });\n      const wishlistItem = await storage.addToWishlist(validatedData);\n      res.json(wishlistItem);\n    } catch (error) {\n      console.error(\"Error adding to wishlist:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid wishlist data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to add to wishlist\" });\n    }\n  });\n\n  app.delete('/api/wishlist/:productId', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const success = await storage.removeFromWishlist(userId, req.params.productId);\n      if (!success) {\n        return res.status(404).json({ message: \"Wishlist item not found\" });\n      }\n      res.json({ message: \"Item removed from wishlist\" });\n    } catch (error) {\n      console.error(\"Error removing from wishlist:\", error);\n      res.status(500).json({ message: \"Failed to remove from wishlist\" });\n    }\n  });\n\n  // Review routes\n  app.get('/api/products/:id/reviews', async (req, res) => {\n    try {\n      const reviews = await storage.getProductReviews(req.params.id);\n      res.json(reviews);\n    } catch (error) {\n      console.error(\"Error fetching reviews:\", error);\n      res.status(500).json({ message: \"Failed to fetch reviews\" });\n    }\n  });\n\n  app.post('/api/products/:id/reviews', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const reviewData = { ...req.body, userId, productId: req.params.id };\n      const validatedData = insertReviewSchema.parse(reviewData);\n      const review = await storage.addReview(validatedData);\n      res.json(review);\n    } catch (error) {\n      console.error(\"Error adding review:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid review data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to add review\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":13017},"server/storage.ts":{"content":"import {\n  users,\n  products,\n  cartItems,\n  orders,\n  orderItems,\n  orderTracking,\n  wishlist,\n  reviews,\n  type User,\n  type UpsertUser,\n  type Product,\n  type InsertProduct,\n  type CartItem,\n  type InsertCartItem,\n  type Order,\n  type InsertOrder,\n  type InsertOrderInput,\n  type OrderItem,\n  type InsertOrderItem,\n  type OrderTracking,\n  type InsertOrderTracking,\n  type WishlistItem,\n  type InsertWishlistItem,\n  type Review,\n  type InsertReview,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, ilike, sql, inArray } from \"drizzle-orm\";\n\n// Interface for storage operations\nexport interface IStorage {\n  // User operations (IMPORTANT) these user operations are mandatory for Replit Auth.\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Product operations\n  getProducts(filters?: {\n    category?: string;\n    search?: string;\n    featured?: boolean;\n    limit?: number;\n    offset?: number;\n  }): Promise<Product[]>;\n  getProduct(id: string): Promise<Product | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product | undefined>;\n  deleteProduct(id: string): Promise<boolean>;\n  \n  // Cart operations\n  getCartItems(userId: string): Promise<(CartItem & { product: Product })[]>;\n  addToCart(cartItem: InsertCartItem): Promise<CartItem>;\n  updateCartItem(id: string, quantity: number): Promise<CartItem | undefined>;\n  removeFromCart(id: string): Promise<boolean>;\n  clearCart(userId: string): Promise<boolean>;\n  \n  // Order operations\n  createOrder(order: InsertOrderInput, items: InsertOrderItem[]): Promise<Order>;\n  getOrders(userId: string): Promise<(Order & { orderItems: (OrderItem & { product: Product })[] })[]>;\n  getOrder(id: string): Promise<(Order & { orderItems: (OrderItem & { product: Product })[], tracking: OrderTracking[] }) | undefined>;\n  updateOrderStatus(id: string, status: string): Promise<Order | undefined>;\n  getOrderByNumber(orderNumber: string): Promise<(Order & { orderItems: (OrderItem & { product: Product })[], tracking: OrderTracking[] }) | undefined>;\n  \n  // Order tracking operations\n  addOrderTracking(tracking: InsertOrderTracking): Promise<OrderTracking>;\n  getOrderTracking(orderId: string): Promise<OrderTracking[]>;\n  \n  // Wishlist operations\n  getWishlist(userId: string): Promise<(WishlistItem & { product: Product })[]>;\n  addToWishlist(wishlistItem: InsertWishlistItem): Promise<WishlistItem>;\n  removeFromWishlist(userId: string, productId: string): Promise<boolean>;\n  \n  // Review operations\n  getProductReviews(productId: string): Promise<(Review & { user: User })[]>;\n  addReview(review: InsertReview): Promise<Review>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations (IMPORTANT) these user operations are mandatory for Replit Auth.\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Product operations\n  async getProducts(filters?: {\n    category?: string;\n    search?: string;\n    featured?: boolean;\n    limit?: number;\n    offset?: number;\n  }): Promise<Product[]> {\n    const conditions = [eq(products.isActive, true)];\n    \n    if (filters?.category) {\n      conditions.push(eq(products.category, filters.category as any));\n    }\n    \n    if (filters?.search) {\n      conditions.push(\n        sql`${products.name} ILIKE ${`%${filters.search}%`} OR ${products.description} ILIKE ${`%${filters.search}%`} OR ${products.brand} ILIKE ${`%${filters.search}%`}`\n      );\n    }\n    \n    if (filters?.featured) {\n      conditions.push(eq(products.isFeatured, true));\n    }\n    \n    const baseQuery = db.select().from(products).where(and(...conditions))\n      .orderBy(desc(products.createdAt));\n    \n    if (filters?.limit && filters?.offset) {\n      return await baseQuery.limit(filters.limit).offset(filters.offset);\n    } else if (filters?.limit) {\n      return await baseQuery.limit(filters.limit);\n    } else {\n      return await baseQuery;\n    }\n  }\n\n  async getProduct(id: string): Promise<Product | undefined> {\n    const [product] = await db.select().from(products).where(eq(products.id, id));\n    return product;\n  }\n\n  async createProduct(product: InsertProduct): Promise<Product> {\n    const [newProduct] = await db.insert(products).values(product).returning();\n    return newProduct;\n  }\n\n  async updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product | undefined> {\n    const [updatedProduct] = await db\n      .update(products)\n      .set({ ...product, updatedAt: new Date() })\n      .where(eq(products.id, id))\n      .returning();\n    return updatedProduct;\n  }\n\n  async deleteProduct(id: string): Promise<boolean> {\n    const result = await db.update(products)\n      .set({ isActive: false })\n      .where(eq(products.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Cart operations\n  async getCartItems(userId: string): Promise<(CartItem & { product: Product })[]> {\n    const result = await db\n      .select()\n      .from(cartItems)\n      .innerJoin(products, eq(cartItems.productId, products.id))\n      .where(eq(cartItems.userId, userId));\n    \n    return result.map(row => ({\n      ...row.cart_items,\n      product: row.products\n    }));\n  }\n\n  async addToCart(cartItem: InsertCartItem): Promise<CartItem> {\n    // Check if item already exists in cart\n    const [existing] = await db\n      .select()\n      .from(cartItems)\n      .where(\n        and(\n          eq(cartItems.userId, cartItem.userId),\n          eq(cartItems.productId, cartItem.productId),\n          cartItem.size ? eq(cartItems.size, cartItem.size) : sql`${cartItems.size} IS NULL`,\n          cartItem.color ? eq(cartItems.color, cartItem.color) : sql`${cartItems.color} IS NULL`\n        )\n      );\n\n    if (existing) {\n      // Update quantity\n      const [updated] = await db\n        .update(cartItems)\n        .set({ quantity: (existing.quantity ?? 0) + (cartItem.quantity ?? 1) })\n        .where(eq(cartItems.id, existing.id))\n        .returning();\n      return updated;\n    }\n\n    const [newCartItem] = await db.insert(cartItems).values(cartItem).returning();\n    return newCartItem;\n  }\n\n  async updateCartItem(id: string, quantity: number): Promise<CartItem | undefined> {\n    const [updated] = await db\n      .update(cartItems)\n      .set({ quantity })\n      .where(eq(cartItems.id, id))\n      .returning();\n    return updated;\n  }\n\n  async removeFromCart(id: string): Promise<boolean> {\n    const result = await db.delete(cartItems).where(eq(cartItems.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  async clearCart(userId: string): Promise<boolean> {\n    const result = await db.delete(cartItems).where(eq(cartItems.userId, userId));\n    return (result.rowCount ?? 0) >= 0;\n  }\n\n  // Order operations\n  async createOrder(order: InsertOrderInput, items: InsertOrderItem[]): Promise<Order> {\n    return await db.transaction(async (tx) => {\n      // Generate order number\n      const orderNumber = `ORD-${Date.now()}-${Math.random().toString(36).substr(2, 9).toUpperCase()}`;\n      \n      const [newOrder] = await tx\n        .insert(orders)\n        .values({ ...order, orderNumber })\n        .returning();\n\n      // Add order items\n      const orderItemsWithOrderId = items.map(item => ({ ...item, orderId: newOrder.id }));\n      await tx.insert(orderItems).values(orderItemsWithOrderId);\n\n      // Add initial tracking\n      await tx.insert(orderTracking).values({\n        orderId: newOrder.id,\n        status: 'pending',\n        message: 'Order placed successfully',\n      });\n\n      return newOrder;\n    });\n  }\n\n  async getOrders(userId: string): Promise<(Order & { orderItems: (OrderItem & { product: Product })[] })[]> {\n    const userOrders = await db\n      .select()\n      .from(orders)\n      .where(eq(orders.userId, userId))\n      .orderBy(desc(orders.createdAt));\n\n    const ordersWithItems = await Promise.all(\n      userOrders.map(async (order) => {\n        const items = await db\n          .select()\n          .from(orderItems)\n          .innerJoin(products, eq(orderItems.productId, products.id))\n          .where(eq(orderItems.orderId, order.id));\n        \n        return { ...order, orderItems: items.map(item => ({\n          ...item.order_items,\n          product: item.products\n        })) };\n      })\n    );\n\n    return ordersWithItems;\n  }\n\n  async getOrder(id: string): Promise<(Order & { orderItems: (OrderItem & { product: Product })[], tracking: OrderTracking[] }) | undefined> {\n    const [order] = await db.select().from(orders).where(eq(orders.id, id));\n    if (!order) return undefined;\n\n    const items = await db\n      .select()\n      .from(orderItems)\n      .innerJoin(products, eq(orderItems.productId, products.id))\n      .where(eq(orderItems.orderId, order.id));\n\n    const tracking = await db\n      .select()\n      .from(orderTracking)\n      .where(eq(orderTracking.orderId, order.id))\n      .orderBy(desc(orderTracking.timestamp));\n\n    return { \n      ...order, \n      orderItems: items.map(item => ({\n        ...item.order_items,\n        product: item.products\n      })), \n      tracking \n    };\n  }\n\n  async updateOrderStatus(id: string, status: string): Promise<Order | undefined> {\n    const [updated] = await db\n      .update(orders)\n      .set({ status: status as any, updatedAt: new Date() })\n      .where(eq(orders.id, id))\n      .returning();\n    \n    if (updated) {\n      // Add tracking entry\n      await this.addOrderTracking({\n        orderId: id,\n        status: status as any,\n        message: `Order status updated to ${status}`,\n      });\n    }\n    \n    return updated;\n  }\n\n  async getOrderByNumber(orderNumber: string): Promise<(Order & { orderItems: (OrderItem & { product: Product })[], tracking: OrderTracking[] }) | undefined> {\n    const [order] = await db.select().from(orders).where(eq(orders.orderNumber, orderNumber));\n    if (!order) return undefined;\n\n    const items = await db\n      .select()\n      .from(orderItems)\n      .innerJoin(products, eq(orderItems.productId, products.id))\n      .where(eq(orderItems.orderId, order.id));\n\n    const tracking = await db\n      .select()\n      .from(orderTracking)\n      .where(eq(orderTracking.orderId, order.id))\n      .orderBy(desc(orderTracking.timestamp));\n\n    return { \n      ...order, \n      orderItems: items.map(item => ({\n        ...item.order_items,\n        product: item.products\n      })), \n      tracking \n    };\n  }\n\n  // Order tracking operations\n  async addOrderTracking(tracking: InsertOrderTracking): Promise<OrderTracking> {\n    const [newTracking] = await db.insert(orderTracking).values(tracking).returning();\n    return newTracking;\n  }\n\n  async getOrderTracking(orderId: string): Promise<OrderTracking[]> {\n    return await db\n      .select()\n      .from(orderTracking)\n      .where(eq(orderTracking.orderId, orderId))\n      .orderBy(desc(orderTracking.timestamp));\n  }\n\n  // Wishlist operations\n  async getWishlist(userId: string): Promise<(WishlistItem & { product: Product })[]> {\n    const result = await db\n      .select()\n      .from(wishlist)\n      .innerJoin(products, eq(wishlist.productId, products.id))\n      .where(eq(wishlist.userId, userId))\n      .orderBy(desc(wishlist.createdAt));\n    \n    return result.map(row => ({\n      ...row.wishlist,\n      product: row.products\n    }));\n  }\n\n  async addToWishlist(wishlistItem: InsertWishlistItem): Promise<WishlistItem> {\n    const [newWishlistItem] = await db.insert(wishlist).values(wishlistItem).returning();\n    return newWishlistItem;\n  }\n\n  async removeFromWishlist(userId: string, productId: string): Promise<boolean> {\n    const result = await db\n      .delete(wishlist)\n      .where(and(eq(wishlist.userId, userId), eq(wishlist.productId, productId)));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Review operations\n  async getProductReviews(productId: string): Promise<(Review & { user: User })[]> {\n    const result = await db\n      .select()\n      .from(reviews)\n      .innerJoin(users, eq(reviews.userId, users.id))\n      .where(eq(reviews.productId, productId))\n      .orderBy(desc(reviews.createdAt));\n    \n    return result.map(row => ({\n      ...row.reviews,\n      user: row.users\n    }));\n  }\n\n  async addReview(review: InsertReview): Promise<Review> {\n    const [newReview] = await db.insert(reviews).values(review).returning();\n    \n    // Update product rating\n    const productReviews = await db\n      .select()\n      .from(reviews)\n      .where(eq(reviews.productId, review.productId));\n    \n    const avgRating = productReviews.reduce((sum, r) => sum + r.rating, 0) / productReviews.length;\n    \n    await db\n      .update(products)\n      .set({\n        rating: avgRating.toFixed(1),\n        reviewCount: productReviews.length,\n        updatedAt: new Date(),\n      })\n      .where(eq(products.id, review.productId));\n    \n    return newReview;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":13338},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  decimal,\n  boolean,\n  pgEnum,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  isAdmin: boolean(\"is_admin\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const categoryEnum = pgEnum(\"category\", [\n  \"men\",\n  \"women\", \n  \"kids\",\n  \"accessories\"\n]);\n\nexport const sizeEnum = pgEnum(\"size\", [\n  \"XS\",\n  \"S\", \n  \"M\",\n  \"L\",\n  \"XL\",\n  \"XXL\"\n]);\n\nexport const orderStatusEnum = pgEnum(\"order_status\", [\n  \"pending\",\n  \"confirmed\", \n  \"shipped\",\n  \"out_for_delivery\",\n  \"delivered\",\n  \"cancelled\",\n  \"returned\"\n]);\n\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  brand: varchar(\"brand\").notNull(),\n  category: categoryEnum(\"category\").notNull(),\n  subcategory: varchar(\"subcategory\"),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  salePrice: decimal(\"sale_price\", { precision: 10, scale: 2 }),\n  imageUrl: text(\"image_url\").notNull(),\n  images: text(\"images\").array(),\n  sizes: sizeEnum(\"sizes\").array(),\n  colors: varchar(\"colors\").array(),\n  stock: integer(\"stock\").default(0),\n  rating: decimal(\"rating\", { precision: 2, scale: 1 }).default(\"0\"),\n  reviewCount: integer(\"review_count\").default(0),\n  isActive: boolean(\"is_active\").default(true),\n  isFeatured: boolean(\"is_featured\").default(false),\n  tags: varchar(\"tags\").array(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const cartItems = pgTable(\"cart_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  productId: varchar(\"product_id\").references(() => products.id, { onDelete: \"cascade\" }).notNull(),\n  quantity: integer(\"quantity\").notNull().default(1),\n  size: sizeEnum(\"size\"),\n  color: varchar(\"color\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const orders = pgTable(\"orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  orderNumber: varchar(\"order_number\").unique().notNull(),\n  status: orderStatusEnum(\"status\").default(\"pending\"),\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  shippingAddress: jsonb(\"shipping_address\").notNull(),\n  paymentMethod: varchar(\"payment_method\"),\n  paymentStatus: varchar(\"payment_status\").default(\"pending\"),\n  trackingNumber: varchar(\"tracking_number\"),\n  estimatedDelivery: timestamp(\"estimated_delivery\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const orderItems = pgTable(\"order_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderId: varchar(\"order_id\").references(() => orders.id, { onDelete: \"cascade\" }).notNull(),\n  productId: varchar(\"product_id\").references(() => products.id).notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  size: sizeEnum(\"size\"),\n  color: varchar(\"color\"),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const orderTracking = pgTable(\"order_tracking\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderId: varchar(\"order_id\").references(() => orders.id, { onDelete: \"cascade\" }).notNull(),\n  status: orderStatusEnum(\"status\").notNull(),\n  message: text(\"message\"),\n  location: varchar(\"location\"),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\nexport const wishlist = pgTable(\"wishlist\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  productId: varchar(\"product_id\").references(() => products.id, { onDelete: \"cascade\" }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const reviews = pgTable(\"reviews\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  productId: varchar(\"product_id\").references(() => products.id, { onDelete: \"cascade\" }).notNull(),\n  orderId: varchar(\"order_id\").references(() => orders.id),\n  rating: integer(\"rating\").notNull(),\n  comment: text(\"comment\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  cartItems: many(cartItems),\n  orders: many(orders),\n  wishlist: many(wishlist),\n  reviews: many(reviews),\n}));\n\nexport const productsRelations = relations(products, ({ many }) => ({\n  cartItems: many(cartItems),\n  orderItems: many(orderItems),\n  wishlist: many(wishlist),\n  reviews: many(reviews),\n}));\n\nexport const cartItemsRelations = relations(cartItems, ({ one }) => ({\n  user: one(users, {\n    fields: [cartItems.userId],\n    references: [users.id],\n  }),\n  product: one(products, {\n    fields: [cartItems.productId],\n    references: [products.id],\n  }),\n}));\n\nexport const ordersRelations = relations(orders, ({ one, many }) => ({\n  user: one(users, {\n    fields: [orders.userId],\n    references: [users.id],\n  }),\n  orderItems: many(orderItems),\n  tracking: many(orderTracking),\n}));\n\nexport const orderItemsRelations = relations(orderItems, ({ one }) => ({\n  order: one(orders, {\n    fields: [orderItems.orderId],\n    references: [orders.id],\n  }),\n  product: one(products, {\n    fields: [orderItems.productId],\n    references: [products.id],\n  }),\n}));\n\nexport const orderTrackingRelations = relations(orderTracking, ({ one }) => ({\n  order: one(orders, {\n    fields: [orderTracking.orderId],\n    references: [orders.id],\n  }),\n}));\n\nexport const wishlistRelations = relations(wishlist, ({ one }) => ({\n  user: one(users, {\n    fields: [wishlist.userId],\n    references: [users.id],\n  }),\n  product: one(products, {\n    fields: [wishlist.productId],\n    references: [products.id],\n  }),\n}));\n\nexport const reviewsRelations = relations(reviews, ({ one }) => ({\n  user: one(users, {\n    fields: [reviews.userId],\n    references: [users.id],\n  }),\n  product: one(products, {\n    fields: [reviews.productId],\n    references: [products.id],\n  }),\n  order: one(orders, {\n    fields: [reviews.orderId],\n    references: [orders.id],\n  }),\n}));\n\n// Schema types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\n\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = typeof products.$inferInsert;\n\nexport type CartItem = typeof cartItems.$inferSelect;\nexport type InsertCartItem = typeof cartItems.$inferInsert;\n\nexport type Order = typeof orders.$inferSelect;\nexport type InsertOrder = typeof orders.$inferInsert;\nexport type InsertOrderInput = z.infer<typeof insertOrderSchema>;\n\nexport type OrderItem = typeof orderItems.$inferSelect;\nexport type InsertOrderItem = typeof orderItems.$inferInsert;\n\nexport type OrderTracking = typeof orderTracking.$inferSelect;\nexport type InsertOrderTracking = typeof orderTracking.$inferInsert;\n\nexport type WishlistItem = typeof wishlist.$inferSelect;\nexport type InsertWishlistItem = typeof wishlist.$inferInsert;\n\nexport type Review = typeof reviews.$inferSelect;\nexport type InsertReview = typeof reviews.$inferInsert;\n\n// Zod schemas\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCartItemSchema = createInsertSchema(cartItems).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  orderNumber: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertOrderItemSchema = createInsertSchema(orderItems).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertOrderTrackingSchema = createInsertSchema(orderTracking).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertWishlistItemSchema = createInsertSchema(wishlist).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertReviewSchema = createInsertSchema(reviews).omit({\n  id: true,\n  createdAt: true,\n});\n","size_bytes":9178},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Home from \"@/pages/home\";\nimport Products from \"@/pages/products\";\nimport ProductDetail from \"@/pages/product-detail\";\nimport Cart from \"@/pages/cart\";\nimport Checkout from \"@/pages/checkout\";\nimport Orders from \"@/pages/orders\";\nimport TrackOrder from \"@/pages/track-order\";\nimport Admin from \"@/pages/admin\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading ? (\n        <Route path=\"/\" component={() => <div className=\"min-h-screen flex items-center justify-center\"><div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" /></div>} />\n      ) : !isAuthenticated ? (\n        <>\n          <Route path=\"/\" component={Landing} />\n          <Route path=\"/products\" component={Products} />\n          <Route path=\"/product/:id\" component={ProductDetail} />\n          <Route path=\"/track\" component={TrackOrder} />\n        </>\n      ) : (\n        <>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/products\" component={Products} />\n          <Route path=\"/product/:id\" component={ProductDetail} />\n          <Route path=\"/cart\" component={Cart} />\n          <Route path=\"/checkout\" component={Checkout} />\n          <Route path=\"/orders\" component={Orders} />\n          <Route path=\"/track\" component={TrackOrder} />\n          <Route path=\"/admin\" component={Admin} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2080},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(222.2 84% 4.9%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(222.2 84% 4.9%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(222.2 84% 4.9%);\n  --primary: hsl(221.2 83.2% 53.3%);\n  --primary-foreground: hsl(210 40% 98%);\n  --secondary: hsl(210 40% 96%);\n  --secondary-foreground: hsl(222.2 84% 4.9%);\n  --muted: hsl(210 40% 96%);\n  --muted-foreground: hsl(215.4 16.3% 46.9%);\n  --accent: hsl(24.6 95% 53.1%);\n  --accent-foreground: hsl(210 40% 98%);\n  --destructive: hsl(0 84.2% 60.2%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(214.3 31.8% 91.4%);\n  --input: hsl(214.3 31.8% 91.4%);\n  --ring: hsl(221.2 83.2% 53.3%);\n  --chart-1: hsl(12 76% 61%);\n  --chart-2: hsl(173 58% 39%);\n  --chart-3: hsl(197 37% 24%);\n  --chart-4: hsl(43 74% 66%);\n  --chart-5: hsl(27 87% 67%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n.mega-menu {\n  transform: translateY(-10px);\n  opacity: 0;\n  visibility: hidden;\n  transition: all 0.3s ease;\n}\n\n.mega-menu.show {\n  transform: translateY(0);\n  opacity: 1;\n  visibility: visible;\n}\n","size_bytes":5222},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":307},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { \n  Package, \n  ShoppingBag, \n  Users, \n  TrendingUp, \n  Plus, \n  Edit, \n  Trash2, \n  Eye,\n  CheckCircle,\n  Clock,\n  Truck\n} from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\n\nconst productSchema = z.object({\n  name: z.string().min(2, \"Product name must be at least 2 characters\"),\n  description: z.string().min(10, \"Description must be at least 10 characters\"),\n  brand: z.string().min(2, \"Brand must be at least 2 characters\"),\n  category: z.enum([\"men\", \"women\", \"kids\", \"accessories\"]),\n  subcategory: z.string().optional(),\n  price: z.string().min(1, \"Price is required\"),\n  salePrice: z.string().optional(),\n  imageUrl: z.string().url(\"Must be a valid URL\"),\n  images: z.string().optional(),\n  sizes: z.string().optional(),\n  colors: z.string().optional(),\n  stock: z.string().min(1, \"Stock is required\"),\n  isFeatured: z.boolean().default(false),\n  tags: z.string().optional(),\n});\n\ntype ProductForm = z.infer<typeof productSchema>;\n\nexport default function Admin() {\n  const { user, isLoading, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedProduct, setSelectedProduct] = useState<any>(null);\n  const [showProductDialog, setShowProductDialog] = useState(false);\n  const [editingProduct, setEditingProduct] = useState<any>(null);\n\n  // Redirect if not authenticated or not admin\n  useEffect(() => {\n    if (!isLoading && (!isAuthenticated || !user?.isAdmin)) {\n      toast({\n        title: \"Access Denied\",\n        description: \"You don't have permission to access this page.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/\";\n      }, 1000);\n      return;\n    }\n  }, [isAuthenticated, isLoading, user, toast]);\n\n  const { data: products = [], isLoading: productsLoading } = useQuery({\n    queryKey: [\"/api/products\", { limit: 100 }],\n    enabled: isAuthenticated && user?.isAdmin,\n  });\n\n  const { data: orders = [], isLoading: ordersLoading } = useQuery({\n    queryKey: [\"/api/orders\"],\n    enabled: isAuthenticated && user?.isAdmin,\n  });\n\n  const form = useForm<ProductForm>({\n    resolver: zodResolver(productSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      brand: \"\",\n      category: \"men\",\n      subcategory: \"\",\n      price: \"\",\n      salePrice: \"\",\n      imageUrl: \"\",\n      images: \"\",\n      sizes: \"\",\n      colors: \"\",\n      stock: \"\",\n      isFeatured: false,\n      tags: \"\",\n    },\n  });\n\n  const createProductMutation = useMutation({\n    mutationFn: async (data: ProductForm) => {\n      const productData = {\n        ...data,\n        price: data.price,\n        salePrice: data.salePrice || null,\n        stock: parseInt(data.stock),\n        images: data.images ? data.images.split(\",\").map(img => img.trim()) : [],\n        sizes: data.sizes ? data.sizes.split(\",\").map(size => size.trim()) : [],\n        colors: data.colors ? data.colors.split(\",\").map(color => color.trim()) : [],\n        tags: data.tags ? data.tags.split(\",\").map(tag => tag.trim()) : [],\n      };\n      \n      if (editingProduct) {\n        return apiRequest(\"PUT\", `/api/products/${editingProduct.id}`, productData);\n      } else {\n        return apiRequest(\"POST\", \"/api/products\", productData);\n      }\n    },\n    onSuccess: () => {\n      toast({\n        title: editingProduct ? \"Product Updated\" : \"Product Created\",\n        description: `Product has been ${editingProduct ? \"updated\" : \"created\"} successfully.`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      setShowProductDialog(false);\n      setEditingProduct(null);\n      form.reset();\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: `Failed to ${editingProduct ? \"update\" : \"create\"} product.`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteProductMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"DELETE\", `/api/products/${id}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Product Deleted\",\n        description: \"Product has been deleted successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete product.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateOrderStatusMutation = useMutation({\n    mutationFn: async ({ orderId, status }: { orderId: string, status: string }) => {\n      return apiRequest(\"PUT\", `/api/orders/${orderId}/status`, { status });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Order Updated\",\n        description: \"Order status has been updated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update order status.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading || productsLoading || ordersLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"flex justify-center py-12\">\n          <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated || !user?.isAdmin) {\n    return null;\n  }\n\n  const handleEditProduct = (product: any) => {\n    setEditingProduct(product);\n    form.reset({\n      name: product.name,\n      description: product.description || \"\",\n      brand: product.brand,\n      category: product.category,\n      subcategory: product.subcategory || \"\",\n      price: product.price,\n      salePrice: product.salePrice || \"\",\n      imageUrl: product.imageUrl,\n      images: product.images?.join(\", \") || \"\",\n      sizes: product.sizes?.join(\", \") || \"\",\n      colors: product.colors?.join(\", \") || \"\",\n      stock: product.stock?.toString() || \"0\",\n      isFeatured: product.isFeatured || false,\n      tags: product.tags?.join(\", \") || \"\",\n    });\n    setShowProductDialog(true);\n  };\n\n  const totalRevenue = orders.reduce((sum: number, order: any) => sum + parseFloat(order.totalAmount), 0);\n  const pendingOrders = orders.filter((order: any) => order.status === \"pending\").length;\n  const totalProducts = products.length;\n  const lowStockProducts = products.filter((product: any) => product.stock < 10).length;\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return <Clock className=\"w-4 h-4\" />;\n      case \"confirmed\":\n        return <CheckCircle className=\"w-4 h-4\" />;\n      case \"shipped\":\n        return <Package className=\"w-4 h-4\" />;\n      case \"out_for_delivery\":\n        return <Truck className=\"w-4 h-4\" />;\n      case \"delivered\":\n        return <CheckCircle className=\"w-4 h-4\" />;\n      default:\n        return <Clock className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return \"bg-yellow-100 text-yellow-800\";\n      case \"confirmed\":\n        return \"bg-blue-100 text-blue-800\";\n      case \"shipped\":\n        return \"bg-purple-100 text-purple-800\";\n      case \"out_for_delivery\":\n        return \"bg-orange-100 text-orange-800\";\n      case \"delivered\":\n        return \"bg-green-100 text-green-800\";\n      case \"cancelled\":\n        return \"bg-red-100 text-red-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <h1 className=\"text-3xl font-bold text-foreground\">Admin Dashboard</h1>\n          <Badge variant=\"secondary\" className=\"text-sm\">\n            Administrator\n          </Badge>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid md:grid-cols-4 gap-6 mb-8\">\n          <Card data-testid=\"card-total-revenue\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"bg-primary/10 p-3 rounded-full\">\n                  <TrendingUp className=\"w-6 h-6 text-primary\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Total Revenue</p>\n                  <p className=\"text-2xl font-bold text-foreground\">₹{totalRevenue.toLocaleString()}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-total-orders\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"bg-chart-2/10 p-3 rounded-full\">\n                  <ShoppingBag className=\"w-6 h-6 text-chart-2\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Total Orders</p>\n                  <p className=\"text-2xl font-bold text-foreground\">{orders.length}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-total-products\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"bg-accent/10 p-3 rounded-full\">\n                  <Package className=\"w-6 h-6 text-accent\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Total Products</p>\n                  <p className=\"text-2xl font-bold text-foreground\">{totalProducts}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-pending-orders\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"bg-destructive/10 p-3 rounded-full\">\n                  <Clock className=\"w-6 h-6 text-destructive\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Pending Orders</p>\n                  <p className=\"text-2xl font-bold text-foreground\">{pendingOrders}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Tabs defaultValue=\"products\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"products\" data-testid=\"tab-products\">Products Management</TabsTrigger>\n            <TabsTrigger value=\"orders\" data-testid=\"tab-orders\">Orders Management</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"products\" className=\"mt-8\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle>Products</CardTitle>\n                  <Dialog open={showProductDialog} onOpenChange={setShowProductDialog}>\n                    <DialogTrigger asChild>\n                      <Button \n                        onClick={() => {\n                          setEditingProduct(null);\n                          form.reset();\n                        }}\n                        data-testid=\"button-add-product\"\n                      >\n                        <Plus className=\"w-4 h-4 mr-2\" />\n                        Add Product\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n                      <DialogHeader>\n                        <DialogTitle>\n                          {editingProduct ? \"Edit Product\" : \"Add New Product\"}\n                        </DialogTitle>\n                      </DialogHeader>\n                      <form onSubmit={form.handleSubmit((data) => createProductMutation.mutate(data))} className=\"space-y-4\">\n                        <div className=\"grid md:grid-cols-2 gap-4\">\n                          <div>\n                            <Label htmlFor=\"name\">Product Name</Label>\n                            <Input\n                              id=\"name\"\n                              {...form.register(\"name\")}\n                              data-testid=\"input-product-name\"\n                            />\n                            {form.formState.errors.name && (\n                              <p className=\"text-sm text-destructive mt-1\">\n                                {form.formState.errors.name.message}\n                              </p>\n                            )}\n                          </div>\n                          \n                          <div>\n                            <Label htmlFor=\"brand\">Brand</Label>\n                            <Input\n                              id=\"brand\"\n                              {...form.register(\"brand\")}\n                              data-testid=\"input-product-brand\"\n                            />\n                            {form.formState.errors.brand && (\n                              <p className=\"text-sm text-destructive mt-1\">\n                                {form.formState.errors.brand.message}\n                              </p>\n                            )}\n                          </div>\n                        </div>\n\n                        <div>\n                          <Label htmlFor=\"description\">Description</Label>\n                          <Textarea\n                            id=\"description\"\n                            {...form.register(\"description\")}\n                            data-testid=\"textarea-product-description\"\n                          />\n                          {form.formState.errors.description && (\n                            <p className=\"text-sm text-destructive mt-1\">\n                              {form.formState.errors.description.message}\n                            </p>\n                          )}\n                        </div>\n\n                        <div className=\"grid md:grid-cols-2 gap-4\">\n                          <div>\n                            <Label htmlFor=\"category\">Category</Label>\n                            <Select \n                              value={form.watch(\"category\")} \n                              onValueChange={(value) => form.setValue(\"category\", value as any)}\n                            >\n                              <SelectTrigger data-testid=\"select-product-category\">\n                                <SelectValue />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"men\">Men</SelectItem>\n                                <SelectItem value=\"women\">Women</SelectItem>\n                                <SelectItem value=\"kids\">Kids</SelectItem>\n                                <SelectItem value=\"accessories\">Accessories</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n                          \n                          <div>\n                            <Label htmlFor=\"subcategory\">Subcategory</Label>\n                            <Input\n                              id=\"subcategory\"\n                              {...form.register(\"subcategory\")}\n                              placeholder=\"e.g., shirts, pants, shoes\"\n                              data-testid=\"input-product-subcategory\"\n                            />\n                          </div>\n                        </div>\n\n                        <div className=\"grid md:grid-cols-3 gap-4\">\n                          <div>\n                            <Label htmlFor=\"price\">Price (₹)</Label>\n                            <Input\n                              id=\"price\"\n                              {...form.register(\"price\")}\n                              data-testid=\"input-product-price\"\n                            />\n                            {form.formState.errors.price && (\n                              <p className=\"text-sm text-destructive mt-1\">\n                                {form.formState.errors.price.message}\n                              </p>\n                            )}\n                          </div>\n                          \n                          <div>\n                            <Label htmlFor=\"salePrice\">Sale Price (₹)</Label>\n                            <Input\n                              id=\"salePrice\"\n                              {...form.register(\"salePrice\")}\n                              placeholder=\"Optional\"\n                              data-testid=\"input-product-sale-price\"\n                            />\n                          </div>\n                          \n                          <div>\n                            <Label htmlFor=\"stock\">Stock</Label>\n                            <Input\n                              id=\"stock\"\n                              type=\"number\"\n                              {...form.register(\"stock\")}\n                              data-testid=\"input-product-stock\"\n                            />\n                            {form.formState.errors.stock && (\n                              <p className=\"text-sm text-destructive mt-1\">\n                                {form.formState.errors.stock.message}\n                              </p>\n                            )}\n                          </div>\n                        </div>\n\n                        <div>\n                          <Label htmlFor=\"imageUrl\">Main Image URL</Label>\n                          <Input\n                            id=\"imageUrl\"\n                            {...form.register(\"imageUrl\")}\n                            placeholder=\"https://example.com/image.jpg\"\n                            data-testid=\"input-product-image-url\"\n                          />\n                          {form.formState.errors.imageUrl && (\n                            <p className=\"text-sm text-destructive mt-1\">\n                              {form.formState.errors.imageUrl.message}\n                            </p>\n                          )}\n                        </div>\n\n                        <div>\n                          <Label htmlFor=\"images\">Additional Images (comma-separated URLs)</Label>\n                          <Input\n                            id=\"images\"\n                            {...form.register(\"images\")}\n                            placeholder=\"https://example.com/image1.jpg, https://example.com/image2.jpg\"\n                            data-testid=\"input-product-images\"\n                          />\n                        </div>\n\n                        <div className=\"grid md:grid-cols-2 gap-4\">\n                          <div>\n                            <Label htmlFor=\"sizes\">Sizes (comma-separated)</Label>\n                            <Input\n                              id=\"sizes\"\n                              {...form.register(\"sizes\")}\n                              placeholder=\"XS, S, M, L, XL\"\n                              data-testid=\"input-product-sizes\"\n                            />\n                          </div>\n                          \n                          <div>\n                            <Label htmlFor=\"colors\">Colors (comma-separated)</Label>\n                            <Input\n                              id=\"colors\"\n                              {...form.register(\"colors\")}\n                              placeholder=\"Red, Blue, Green\"\n                              data-testid=\"input-product-colors\"\n                            />\n                          </div>\n                        </div>\n\n                        <div>\n                          <Label htmlFor=\"tags\">Tags (comma-separated)</Label>\n                          <Input\n                            id=\"tags\"\n                            {...form.register(\"tags\")}\n                            placeholder=\"trending, sale, new\"\n                            data-testid=\"input-product-tags\"\n                          />\n                        </div>\n\n                        <div className=\"flex items-center space-x-2\">\n                          <input\n                            type=\"checkbox\"\n                            id=\"isFeatured\"\n                            {...form.register(\"isFeatured\")}\n                            className=\"rounded\"\n                            data-testid=\"checkbox-product-featured\"\n                          />\n                          <Label htmlFor=\"isFeatured\">Featured Product</Label>\n                        </div>\n\n                        <div className=\"flex justify-end space-x-2\">\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            onClick={() => setShowProductDialog(false)}\n                            data-testid=\"button-cancel-product\"\n                          >\n                            Cancel\n                          </Button>\n                          <Button\n                            type=\"submit\"\n                            disabled={createProductMutation.isPending}\n                            data-testid=\"button-save-product\"\n                          >\n                            {createProductMutation.isPending \n                              ? \"Saving...\" \n                              : editingProduct ? \"Update Product\" : \"Create Product\"\n                            }\n                          </Button>\n                        </div>\n                      </form>\n                    </DialogContent>\n                  </Dialog>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Product</TableHead>\n                      <TableHead>Category</TableHead>\n                      <TableHead>Price</TableHead>\n                      <TableHead>Stock</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {products.map((product: any, index: number) => (\n                      <TableRow key={product.id} data-testid={`row-product-${index}`}>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-3\">\n                            <img\n                              src={product.imageUrl}\n                              alt={product.name}\n                              className=\"w-12 h-12 object-cover rounded-lg\"\n                            />\n                            <div>\n                              <p className=\"font-medium text-foreground\">{product.name}</p>\n                              <p className=\"text-sm text-muted-foreground\">{product.brand}</p>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"capitalize\">{product.category}</TableCell>\n                        <TableCell>\n                          <div>\n                            <p className=\"font-medium\">₹{parseFloat(product.price).toLocaleString()}</p>\n                            {product.salePrice && (\n                              <p className=\"text-sm text-muted-foreground line-through\">\n                                ₹{parseFloat(product.salePrice).toLocaleString()}\n                              </p>\n                            )}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <Badge variant={product.stock < 10 ? \"destructive\" : \"secondary\"}>\n                            {product.stock} units\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          {product.isFeatured && <Badge className=\"mr-2\">Featured</Badge>}\n                          <Badge variant={product.isActive ? \"default\" : \"secondary\"}>\n                            {product.isActive ? \"Active\" : \"Inactive\"}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex space-x-2\">\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleEditProduct(product)}\n                              data-testid={`button-edit-product-${index}`}\n                            >\n                              <Edit className=\"w-4 h-4\" />\n                            </Button>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => deleteProductMutation.mutate(product.id)}\n                              disabled={deleteProductMutation.isPending}\n                              data-testid={`button-delete-product-${index}`}\n                            >\n                              <Trash2 className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"orders\" className=\"mt-8\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Recent Orders</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Order #</TableHead>\n                      <TableHead>Customer</TableHead>\n                      <TableHead>Date</TableHead>\n                      <TableHead>Amount</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {orders.slice(0, 20).map((order: any, index: number) => (\n                      <TableRow key={order.id} data-testid={`row-order-${index}`}>\n                        <TableCell className=\"font-medium\">#{order.orderNumber}</TableCell>\n                        <TableCell>\n                          <div>\n                            <p className=\"font-medium text-foreground\">\n                              {order.shippingAddress?.firstName} {order.shippingAddress?.lastName}\n                            </p>\n                            <p className=\"text-sm text-muted-foreground\">{order.shippingAddress?.email}</p>\n                          </div>\n                        </TableCell>\n                        <TableCell>{new Date(order.createdAt).toLocaleDateString()}</TableCell>\n                        <TableCell className=\"font-medium\">₹{parseFloat(order.totalAmount).toLocaleString()}</TableCell>\n                        <TableCell>\n                          <Select\n                            value={order.status}\n                            onValueChange={(value) => updateOrderStatusMutation.mutate({ orderId: order.id, status: value })}\n                          >\n                            <SelectTrigger className=\"w-40\" data-testid={`select-order-status-${index}`}>\n                              <SelectValue>\n                                <Badge className={`${getStatusColor(order.status)} flex items-center space-x-1`}>\n                                  {getStatusIcon(order.status)}\n                                  <span className=\"capitalize\">{order.status.replace('_', ' ')}</span>\n                                </Badge>\n                              </SelectValue>\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"pending\">Pending</SelectItem>\n                              <SelectItem value=\"confirmed\">Confirmed</SelectItem>\n                              <SelectItem value=\"shipped\">Shipped</SelectItem>\n                              <SelectItem value=\"out_for_delivery\">Out for Delivery</SelectItem>\n                              <SelectItem value=\"delivered\">Delivered</SelectItem>\n                              <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </TableCell>\n                        <TableCell>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => window.open(`/orders/${order.id}`, '_blank')}\n                            data-testid={`button-view-order-${index}`}\n                          >\n                            <Eye className=\"w-4 h-4\" />\n                          </Button>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":31654},"client/src/pages/cart.tsx":{"content":"import { useEffect } from \"react\";\nimport { Link } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Input } from \"@/components/ui/input\";\nimport { ShoppingBag, Minus, Plus, Trash2, Heart, ArrowRight } from \"lucide-react\";\n\nexport default function Cart() {\n  const { user, isLoading, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: cartItems = [], isLoading: cartLoading } = useQuery({\n    queryKey: [\"/api/cart\"],\n    enabled: isAuthenticated,\n  });\n\n  const updateQuantityMutation = useMutation({\n    mutationFn: async ({ id, quantity }: { id: string, quantity: number }) => {\n      return apiRequest(\"PUT\", `/api/cart/${id}`, { quantity });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update quantity.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const removeItemMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"DELETE\", `/api/cart/${id}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Item Removed\",\n        description: \"Item has been removed from your cart.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to remove item.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const moveToWishlistMutation = useMutation({\n    mutationFn: async ({ productId, cartItemId }: { productId: string, cartItemId: string }) => {\n      await apiRequest(\"POST\", \"/api/wishlist\", { productId });\n      await apiRequest(\"DELETE\", `/api/cart/${cartItemId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Moved to Wishlist\",\n        description: \"Item has been moved to your wishlist.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/wishlist\"] });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to move item to wishlist.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading || cartLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"flex justify-center py-12\">\n          <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  const subtotal = cartItems.reduce((sum: number, item: any) => {\n    const price = item.product.salePrice ? parseFloat(item.product.salePrice) : parseFloat(item.product.price);\n    return sum + (price * item.quantity);\n  }, 0);\n\n  const shipping = subtotal >= 999 ? 0 : 99;\n  const total = subtotal + shipping;\n\n  if (cartItems.length === 0) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"container mx-auto px-4 py-16\">\n          <div className=\"max-w-md mx-auto text-center\">\n            <ShoppingBag className=\"w-24 h-24 text-muted-foreground mx-auto mb-6\" />\n            <h1 className=\"text-2xl font-bold text-foreground mb-4\">Your Cart is Empty</h1>\n            <p className=\"text-muted-foreground mb-8\">\n              Looks like you haven't added anything to your cart yet. Start shopping to fill it up!\n            </p>\n            <Link href=\"/products\">\n              <Button size=\"lg\" data-testid=\"button-start-shopping\">\n                Start Shopping\n                <ArrowRight className=\"w-4 h-4 ml-2\" />\n              </Button>\n            </Link>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-6xl mx-auto\">\n          <h1 className=\"text-3xl font-bold text-foreground mb-8\">Shopping Cart</h1>\n          \n          <div className=\"grid lg:grid-cols-3 gap-8\">\n            {/* Cart Items */}\n            <div className=\"lg:col-span-2 space-y-4\">\n              {cartItems.map((item: any, index: number) => {\n                const product = item.product;\n                const currentPrice = product.salePrice ? parseFloat(product.salePrice) : parseFloat(product.price);\n                const originalPrice = parseFloat(product.price);\n                const discount = product.salePrice ? Math.round(((originalPrice - currentPrice) / originalPrice) * 100) : 0;\n\n                return (\n                  <Card key={item.id} data-testid={`card-cart-item-${index}`}>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex gap-4\">\n                        <Link href={`/product/${product.id}`}>\n                          <img\n                            src={product.imageUrl}\n                            alt={product.name}\n                            className=\"w-24 h-24 object-cover rounded-lg\"\n                            data-testid={`img-cart-item-${index}`}\n                          />\n                        </Link>\n                        \n                        <div className=\"flex-1 space-y-3\">\n                          <div className=\"flex justify-between items-start\">\n                            <div>\n                              <Link href={`/product/${product.id}`}>\n                                <h3 className=\"font-semibold text-foreground hover:text-primary transition-colors\" data-testid={`text-cart-item-name-${index}`}>\n                                  {product.name}\n                                </h3>\n                              </Link>\n                              <p className=\"text-sm text-muted-foreground\">{product.brand}</p>\n                              {item.size && (\n                                <Badge variant=\"secondary\" className=\"mt-1\">Size: {item.size}</Badge>\n                              )}\n                              {item.color && (\n                                <Badge variant=\"secondary\" className=\"mt-1 ml-2\">Color: {item.color}</Badge>\n                              )}\n                            </div>\n                            \n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => removeItemMutation.mutate(item.id)}\n                              disabled={removeItemMutation.isPending}\n                              data-testid={`button-remove-item-${index}`}\n                            >\n                              <Trash2 className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                          \n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center space-x-2\">\n                              <span className=\"font-bold text-foreground text-lg\" data-testid={`text-cart-item-price-${index}`}>\n                                ₹{currentPrice.toLocaleString()}\n                              </span>\n                              {discount > 0 && (\n                                <>\n                                  <span className=\"text-sm text-muted-foreground line-through\">\n                                    ₹{originalPrice.toLocaleString()}\n                                  </span>\n                                  <Badge variant=\"destructive\" className=\"text-xs\">{discount}% OFF</Badge>\n                                </>\n                              )}\n                            </div>\n                            \n                            <div className=\"flex items-center space-x-3\">\n                              <div className=\"flex items-center space-x-2\">\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={() => updateQuantityMutation.mutate({ id: item.id, quantity: Math.max(1, item.quantity - 1) })}\n                                  disabled={item.quantity <= 1 || updateQuantityMutation.isPending}\n                                  data-testid={`button-decrease-quantity-${index}`}\n                                >\n                                  <Minus className=\"w-3 h-3\" />\n                                </Button>\n                                <span className=\"w-8 text-center font-medium\" data-testid={`text-cart-item-quantity-${index}`}>\n                                  {item.quantity}\n                                </span>\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={() => updateQuantityMutation.mutate({ id: item.id, quantity: item.quantity + 1 })}\n                                  disabled={updateQuantityMutation.isPending}\n                                  data-testid={`button-increase-quantity-${index}`}\n                                >\n                                  <Plus className=\"w-3 h-3\" />\n                                </Button>\n                              </div>\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex space-x-4\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => moveToWishlistMutation.mutate({ productId: product.id, cartItemId: item.id })}\n                              disabled={moveToWishlistMutation.isPending}\n                              data-testid={`button-move-to-wishlist-${index}`}\n                            >\n                              <Heart className=\"w-4 h-4 mr-2\" />\n                              Move to Wishlist\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n\n            {/* Order Summary */}\n            <div className=\"lg:col-span-1\">\n              <Card className=\"sticky top-24\">\n                <CardContent className=\"p-6\">\n                  <h2 className=\"text-xl font-bold text-foreground mb-6\">Order Summary</h2>\n                  \n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Subtotal ({cartItems.length} items)</span>\n                      <span className=\"font-medium\" data-testid=\"text-subtotal\">₹{subtotal.toLocaleString()}</span>\n                    </div>\n                    \n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Shipping</span>\n                      <span className=\"font-medium\" data-testid=\"text-shipping\">\n                        {shipping === 0 ? \"FREE\" : `₹${shipping}`}\n                      </span>\n                    </div>\n                    \n                    {shipping > 0 && (\n                      <p className=\"text-sm text-muted-foreground bg-secondary p-3 rounded-lg\">\n                        Add ₹{(999 - subtotal).toLocaleString()} more to get FREE shipping!\n                      </p>\n                    )}\n                    \n                    <Separator />\n                    \n                    <div className=\"flex justify-between text-lg font-bold\">\n                      <span>Total</span>\n                      <span data-testid=\"text-total\">₹{total.toLocaleString()}</span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"mt-6 space-y-4\">\n                    <Link href=\"/checkout\">\n                      <Button size=\"lg\" className=\"w-full\" data-testid=\"button-proceed-to-checkout\">\n                        Proceed to Checkout\n                        <ArrowRight className=\"w-4 h-4 ml-2\" />\n                      </Button>\n                    </Link>\n                    \n                    <Link href=\"/products\">\n                      <Button variant=\"outline\" size=\"lg\" className=\"w-full\" data-testid=\"button-continue-shopping\">\n                        Continue Shopping\n                      </Button>\n                    </Link>\n                  </div>\n                  \n                  {/* Payment Options */}\n                  <div className=\"mt-6 pt-6 border-t\">\n                    <h3 className=\"font-semibold text-foreground mb-3\">We Accept</h3>\n                    <div className=\"flex space-x-2\">\n                      <div className=\"bg-secondary p-2 rounded text-xs font-medium\">VISA</div>\n                      <div className=\"bg-secondary p-2 rounded text-xs font-medium\">UPI</div>\n                      <div className=\"bg-secondary p-2 rounded text-xs font-medium\">Wallet</div>\n                      <div className=\"bg-secondary p-2 rounded text-xs font-medium\">COD</div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":15383},"client/src/pages/checkout.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { CheckCircle, CreditCard, Smartphone, Wallet, Truck } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\n\nconst checkoutSchema = z.object({\n  firstName: z.string().min(2, \"First name must be at least 2 characters\"),\n  lastName: z.string().min(2, \"Last name must be at least 2 characters\"),\n  email: z.string().email(\"Invalid email address\"),\n  phone: z.string().min(10, \"Phone number must be at least 10 digits\"),\n  address: z.string().min(5, \"Address must be at least 5 characters\"),\n  city: z.string().min(2, \"City must be at least 2 characters\"),\n  state: z.string().min(2, \"State must be at least 2 characters\"),\n  pincode: z.string().min(6, \"Pincode must be at least 6 characters\"),\n  paymentMethod: z.enum([\"card\", \"upi\", \"wallet\", \"cod\"]),\n});\n\ntype CheckoutForm = z.infer<typeof checkoutSchema>;\n\nexport default function Checkout() {\n  const [, navigate] = useLocation();\n  const { user, isLoading, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [orderPlaced, setOrderPlaced] = useState(false);\n  const [orderId, setOrderId] = useState(\"\");\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: cartItems = [], isLoading: cartLoading } = useQuery({\n    queryKey: [\"/api/cart\"],\n    enabled: isAuthenticated,\n  });\n\n  const form = useForm<CheckoutForm>({\n    resolver: zodResolver(checkoutSchema),\n    defaultValues: {\n      firstName: user?.firstName || \"\",\n      lastName: user?.lastName || \"\",\n      email: user?.email || \"\",\n      phone: \"\",\n      address: \"\",\n      city: \"\",\n      state: \"\",\n      pincode: \"\",\n      paymentMethod: \"card\",\n    },\n  });\n\n  const placeOrderMutation = useMutation({\n    mutationFn: async (data: CheckoutForm) => {\n      const orderItems = cartItems.map((item: any) => ({\n        productId: item.productId,\n        quantity: item.quantity,\n        size: item.size,\n        color: item.color,\n        price: item.product.salePrice || item.product.price,\n      }));\n\n      return apiRequest(\"POST\", \"/api/orders\", {\n        shippingAddress: {\n          firstName: data.firstName,\n          lastName: data.lastName,\n          email: data.email,\n          phone: data.phone,\n          address: data.address,\n          city: data.city,\n          state: data.state,\n          pincode: data.pincode,\n        },\n        paymentMethod: data.paymentMethod,\n        items: orderItems,\n      });\n    },\n    onSuccess: (response) => {\n      const order = response;\n      setOrderId(order.id);\n      setOrderPlaced(true);\n      toast({\n        title: \"Order Placed Successfully!\",\n        description: \"Thank you for your order. You will receive a confirmation email shortly.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Order Failed\",\n        description: \"There was an error placing your order. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading || cartLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"flex justify-center py-12\">\n          <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  if (cartItems.length === 0 && !orderPlaced) {\n    navigate(\"/cart\");\n    return null;\n  }\n\n  const subtotal = cartItems.reduce((sum: number, item: any) => {\n    const price = item.product.salePrice ? parseFloat(item.product.salePrice) : parseFloat(item.product.price);\n    return sum + (price * item.quantity);\n  }, 0);\n\n  const shipping = subtotal >= 999 ? 0 : 99;\n  const total = subtotal + shipping;\n\n  if (orderPlaced) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"container mx-auto px-4 py-16\">\n          <div className=\"max-w-2xl mx-auto text-center\">\n            <CheckCircle className=\"w-24 h-24 text-green-500 mx-auto mb-6\" />\n            <h1 className=\"text-3xl font-bold text-foreground mb-4\">Order Confirmed!</h1>\n            <p className=\"text-lg text-muted-foreground mb-8\">\n              Your order has been placed successfully. We'll send you a confirmation email with tracking details.\n            </p>\n            \n            <div className=\"bg-secondary/30 rounded-2xl p-6 mb-8\">\n              <h2 className=\"text-xl font-semibold text-foreground mb-4\">Order Details</h2>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Order ID:</span>\n                  <span className=\"font-medium\" data-testid=\"text-order-id\">{orderId}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Total Amount:</span>\n                  <span className=\"font-medium\" data-testid=\"text-order-total\">₹{total.toLocaleString()}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Estimated Delivery:</span>\n                  <span className=\"font-medium\">3-5 business days</span>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button onClick={() => navigate(\"/orders\")} data-testid=\"button-view-orders\">\n                View My Orders\n              </Button>\n              <Button variant=\"outline\" onClick={() => navigate(\"/products\")} data-testid=\"button-continue-shopping\">\n                Continue Shopping\n              </Button>\n            </div>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-6xl mx-auto\">\n          <h1 className=\"text-3xl font-bold text-foreground mb-8\">Checkout</h1>\n          \n          <form onSubmit={form.handleSubmit((data) => placeOrderMutation.mutate(data))}>\n            <div className=\"grid lg:grid-cols-3 gap-8\">\n              {/* Checkout Form */}\n              <div className=\"lg:col-span-2 space-y-8\">\n                {/* Shipping Information */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <Truck className=\"w-5 h-5\" />\n                      <span>Shipping Information</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"grid md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"firstName\">First Name</Label>\n                        <Input\n                          id=\"firstName\"\n                          {...form.register(\"firstName\")}\n                          data-testid=\"input-first-name\"\n                        />\n                        {form.formState.errors.firstName && (\n                          <p className=\"text-sm text-destructive mt-1\">\n                            {form.formState.errors.firstName.message}\n                          </p>\n                        )}\n                      </div>\n                      <div>\n                        <Label htmlFor=\"lastName\">Last Name</Label>\n                        <Input\n                          id=\"lastName\"\n                          {...form.register(\"lastName\")}\n                          data-testid=\"input-last-name\"\n                        />\n                        {form.formState.errors.lastName && (\n                          <p className=\"text-sm text-destructive mt-1\">\n                            {form.formState.errors.lastName.message}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n\n                    <div className=\"grid md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"email\">Email</Label>\n                        <Input\n                          id=\"email\"\n                          type=\"email\"\n                          {...form.register(\"email\")}\n                          data-testid=\"input-email\"\n                        />\n                        {form.formState.errors.email && (\n                          <p className=\"text-sm text-destructive mt-1\">\n                            {form.formState.errors.email.message}\n                          </p>\n                        )}\n                      </div>\n                      <div>\n                        <Label htmlFor=\"phone\">Phone</Label>\n                        <Input\n                          id=\"phone\"\n                          {...form.register(\"phone\")}\n                          data-testid=\"input-phone\"\n                        />\n                        {form.formState.errors.phone && (\n                          <p className=\"text-sm text-destructive mt-1\">\n                            {form.formState.errors.phone.message}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"address\">Address</Label>\n                      <Textarea\n                        id=\"address\"\n                        {...form.register(\"address\")}\n                        data-testid=\"textarea-address\"\n                      />\n                      {form.formState.errors.address && (\n                        <p className=\"text-sm text-destructive mt-1\">\n                          {form.formState.errors.address.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <div className=\"grid md:grid-cols-3 gap-4\">\n                      <div>\n                        <Label htmlFor=\"city\">City</Label>\n                        <Input\n                          id=\"city\"\n                          {...form.register(\"city\")}\n                          data-testid=\"input-city\"\n                        />\n                        {form.formState.errors.city && (\n                          <p className=\"text-sm text-destructive mt-1\">\n                            {form.formState.errors.city.message}\n                          </p>\n                        )}\n                      </div>\n                      <div>\n                        <Label htmlFor=\"state\">State</Label>\n                        <Input\n                          id=\"state\"\n                          {...form.register(\"state\")}\n                          data-testid=\"input-state\"\n                        />\n                        {form.formState.errors.state && (\n                          <p className=\"text-sm text-destructive mt-1\">\n                            {form.formState.errors.state.message}\n                          </p>\n                        )}\n                      </div>\n                      <div>\n                        <Label htmlFor=\"pincode\">Pincode</Label>\n                        <Input\n                          id=\"pincode\"\n                          {...form.register(\"pincode\")}\n                          data-testid=\"input-pincode\"\n                        />\n                        {form.formState.errors.pincode && (\n                          <p className=\"text-sm text-destructive mt-1\">\n                            {form.formState.errors.pincode.message}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Payment Method */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <CreditCard className=\"w-5 h-5\" />\n                      <span>Payment Method</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <RadioGroup\n                      value={form.watch(\"paymentMethod\")}\n                      onValueChange={(value) => form.setValue(\"paymentMethod\", value as any)}\n                      className=\"space-y-4\"\n                      data-testid=\"radio-group-payment\"\n                    >\n                      <div className=\"flex items-center space-x-2 p-4 border rounded-lg\">\n                        <RadioGroupItem value=\"card\" id=\"card\" />\n                        <Label htmlFor=\"card\" className=\"flex items-center space-x-3 flex-1 cursor-pointer\">\n                          <CreditCard className=\"w-5 h-5 text-muted-foreground\" />\n                          <div>\n                            <div className=\"font-medium\">Credit/Debit Card</div>\n                            <div className=\"text-sm text-muted-foreground\">Visa, Mastercard, RuPay</div>\n                          </div>\n                        </Label>\n                      </div>\n\n                      <div className=\"flex items-center space-x-2 p-4 border rounded-lg\">\n                        <RadioGroupItem value=\"upi\" id=\"upi\" />\n                        <Label htmlFor=\"upi\" className=\"flex items-center space-x-3 flex-1 cursor-pointer\">\n                          <Smartphone className=\"w-5 h-5 text-muted-foreground\" />\n                          <div>\n                            <div className=\"font-medium\">UPI</div>\n                            <div className=\"text-sm text-muted-foreground\">Pay using UPI ID or QR code</div>\n                          </div>\n                        </Label>\n                      </div>\n\n                      <div className=\"flex items-center space-x-2 p-4 border rounded-lg\">\n                        <RadioGroupItem value=\"wallet\" id=\"wallet\" />\n                        <Label htmlFor=\"wallet\" className=\"flex items-center space-x-3 flex-1 cursor-pointer\">\n                          <Wallet className=\"w-5 h-5 text-muted-foreground\" />\n                          <div>\n                            <div className=\"font-medium\">Digital Wallet</div>\n                            <div className=\"text-sm text-muted-foreground\">Paytm, PhonePe, GPay</div>\n                          </div>\n                        </Label>\n                      </div>\n\n                      <div className=\"flex items-center space-x-2 p-4 border rounded-lg\">\n                        <RadioGroupItem value=\"cod\" id=\"cod\" />\n                        <Label htmlFor=\"cod\" className=\"flex items-center space-x-3 flex-1 cursor-pointer\">\n                          <Truck className=\"w-5 h-5 text-muted-foreground\" />\n                          <div>\n                            <div className=\"font-medium\">Cash on Delivery</div>\n                            <div className=\"text-sm text-muted-foreground\">Pay when you receive</div>\n                          </div>\n                        </Label>\n                      </div>\n                    </RadioGroup>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Order Summary */}\n              <div className=\"lg:col-span-1\">\n                <Card className=\"sticky top-24\">\n                  <CardHeader>\n                    <CardTitle>Order Summary</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    {/* Cart Items */}\n                    <div className=\"space-y-3\">\n                      {cartItems.map((item: any, index: number) => {\n                        const product = item.product;\n                        const currentPrice = product.salePrice ? parseFloat(product.salePrice) : parseFloat(product.price);\n                        \n                        return (\n                          <div key={item.id} className=\"flex space-x-3\" data-testid={`order-item-${index}`}>\n                            <img\n                              src={product.imageUrl}\n                              alt={product.name}\n                              className=\"w-16 h-16 object-cover rounded-lg\"\n                            />\n                            <div className=\"flex-1 min-w-0\">\n                              <p className=\"text-sm font-medium text-foreground truncate\">\n                                {product.name}\n                              </p>\n                              <p className=\"text-xs text-muted-foreground\">{product.brand}</p>\n                              <div className=\"flex items-center space-x-2 mt-1\">\n                                {item.size && (\n                                  <span className=\"text-xs bg-secondary px-2 py-1 rounded\">Size: {item.size}</span>\n                                )}\n                                {item.color && (\n                                  <span className=\"text-xs bg-secondary px-2 py-1 rounded\">Color: {item.color}</span>\n                                )}\n                              </div>\n                              <div className=\"flex justify-between items-center mt-2\">\n                                <span className=\"text-xs text-muted-foreground\">Qty: {item.quantity}</span>\n                                <span className=\"text-sm font-medium\">₹{(currentPrice * item.quantity).toLocaleString()}</span>\n                              </div>\n                            </div>\n                          </div>\n                        );\n                      })}\n                    </div>\n\n                    <Separator />\n\n                    {/* Pricing */}\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-muted-foreground\">Subtotal</span>\n                        <span data-testid=\"text-checkout-subtotal\">₹{subtotal.toLocaleString()}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-muted-foreground\">Shipping</span>\n                        <span data-testid=\"text-checkout-shipping\">\n                          {shipping === 0 ? \"FREE\" : `₹${shipping}`}\n                        </span>\n                      </div>\n                      <Separator />\n                      <div className=\"flex justify-between text-lg font-bold\">\n                        <span>Total</span>\n                        <span data-testid=\"text-checkout-total\">₹{total.toLocaleString()}</span>\n                      </div>\n                    </div>\n\n                    <Button\n                      type=\"submit\"\n                      size=\"lg\"\n                      className=\"w-full\"\n                      disabled={placeOrderMutation.isPending}\n                      data-testid=\"button-place-order\"\n                    >\n                      {placeOrderMutation.isPending ? \"Placing Order...\" : \"Place Order\"}\n                    </Button>\n\n                    <p className=\"text-xs text-muted-foreground text-center\">\n                      By placing this order, you agree to our Terms of Service and Privacy Policy.\n                    </p>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":21187},"client/src/pages/home.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport ProductGrid from \"@/components/product/product-grid\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { ShoppingBag, Heart, Clock, Truck } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Order, OrderItem, Product, WishlistItem } from \"@shared/schema\";\n\nexport default function Home() {\n  const { user, isLoading, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: recentOrders } = useQuery<(Order & { orderItems: (OrderItem & { product: Product })[] })[]>({\n    queryKey: [\"/api/orders\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: wishlistItems } = useQuery<(WishlistItem & { product: Product })[]>({\n    queryKey: [\"/api/wishlist\"],\n    enabled: isAuthenticated,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      {/* Welcome Section */}\n      <section className=\"py-12 bg-gradient-to-r from-primary/10 to-accent/10\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h1 className=\"text-3xl lg:text-4xl font-bold text-foreground mb-4\">\n              Welcome back, {user?.firstName || 'Fashion Lover'}!\n            </h1>\n            <p className=\"text-lg text-muted-foreground mb-8\">\n              Discover new arrivals, track your orders, and continue your style journey.\n            </p>\n            \n            <div className=\"grid md:grid-cols-4 gap-6\">\n              <Card className=\"hover:shadow-lg transition-shadow\" data-testid=\"card-orders\">\n                <CardContent className=\"p-6 text-center\">\n                  <ShoppingBag className=\"w-8 h-8 text-primary mx-auto mb-3\" />\n                  <h3 className=\"font-semibold text-foreground mb-2\">My Orders</h3>\n                  <p className=\"text-sm text-muted-foreground mb-4\">\n                    {recentOrders?.length || 0} orders\n                  </p>\n                  <Link href=\"/orders\">\n                    <Button variant=\"outline\" size=\"sm\" data-testid=\"button-view-orders\">\n                      View All\n                    </Button>\n                  </Link>\n                </CardContent>\n              </Card>\n\n              <Card className=\"hover:shadow-lg transition-shadow\" data-testid=\"card-wishlist\">\n                <CardContent className=\"p-6 text-center\">\n                  <Heart className=\"w-8 h-8 text-destructive mx-auto mb-3\" />\n                  <h3 className=\"font-semibold text-foreground mb-2\">Wishlist</h3>\n                  <p className=\"text-sm text-muted-foreground mb-4\">\n                    {wishlistItems?.length || 0} items\n                  </p>\n                  <Link href=\"/products?wishlist=true\">\n                    <Button variant=\"outline\" size=\"sm\" data-testid=\"button-view-wishlist\">\n                      View All\n                    </Button>\n                  </Link>\n                </CardContent>\n              </Card>\n\n              <Card className=\"hover:shadow-lg transition-shadow\" data-testid=\"card-track\">\n                <CardContent className=\"p-6 text-center\">\n                  <Truck className=\"w-8 h-8 text-accent mx-auto mb-3\" />\n                  <h3 className=\"font-semibold text-foreground mb-2\">Track Order</h3>\n                  <p className=\"text-sm text-muted-foreground mb-4\">\n                    Real-time updates\n                  </p>\n                  <Link href=\"/track\">\n                    <Button variant=\"outline\" size=\"sm\" data-testid=\"button-track-order\">\n                      Track Now\n                    </Button>\n                  </Link>\n                </CardContent>\n              </Card>\n\n              <Card className=\"hover:shadow-lg transition-shadow\" data-testid=\"card-account\">\n                <CardContent className=\"p-6 text-center\">\n                  <Clock className=\"w-8 h-8 text-chart-2 mx-auto mb-3\" />\n                  <h3 className=\"font-semibold text-foreground mb-2\">Quick Shop</h3>\n                  <p className=\"text-sm text-muted-foreground mb-4\">\n                    Based on history\n                  </p>\n                  <Link href=\"/products?recommended=true\">\n                    <Button variant=\"outline\" size=\"sm\" data-testid=\"button-quick-shop\">\n                      Shop Now\n                    </Button>\n                  </Link>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Recent Orders */}\n      {recentOrders && recentOrders.length > 0 && (\n        <section className=\"py-12\">\n          <div className=\"container mx-auto px-4\">\n            <div className=\"flex items-center justify-between mb-8\">\n              <h2 className=\"text-2xl lg:text-3xl font-bold text-foreground\">Recent Orders</h2>\n              <Link href=\"/orders\">\n                <Button variant=\"outline\" data-testid=\"button-view-all-orders\">\n                  View All Orders\n                </Button>\n              </Link>\n            </div>\n            \n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {recentOrders.slice(0, 3).map((order: any, index: number) => (\n                <Card key={order.id} className=\"hover:shadow-lg transition-shadow\" data-testid={`card-recent-order-${index}`}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div>\n                        <p className=\"font-semibold text-foreground\">#{order.orderNumber}</p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {new Date(order.createdAt).toLocaleDateString()}\n                        </p>\n                      </div>\n                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${\n                        order.status === 'delivered' ? 'bg-green-100 text-green-800' :\n                        order.status === 'shipped' ? 'bg-blue-100 text-blue-800' :\n                        order.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :\n                        'bg-gray-100 text-gray-800'\n                      }`}>\n                        {order.status}\n                      </span>\n                    </div>\n                    <p className=\"text-lg font-bold text-foreground mb-4\">\n                      ₹{parseFloat(order.totalAmount).toLocaleString()}\n                    </p>\n                    <Link href={`/orders/${order.id}`}>\n                      <Button variant=\"outline\" className=\"w-full\" data-testid={`button-view-order-${index}`}>\n                        View Details\n                      </Button>\n                    </Link>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n        </section>\n      )}\n\n      {/* Featured Products */}\n      <section className=\"py-12 bg-secondary/30\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"flex items-center justify-between mb-8\">\n            <div>\n              <h2 className=\"text-2xl lg:text-3xl font-bold text-foreground mb-2\">Recommended for You</h2>\n              <p className=\"text-muted-foreground\">Curated based on your preferences</p>\n            </div>\n            <Link href=\"/products\">\n              <Button variant=\"outline\" data-testid=\"button-view-all-products\">\n                View All\n              </Button>\n            </Link>\n          </div>\n          <ProductGrid featured={true} limit={8} />\n        </div>\n      </section>\n\n      {/* New Arrivals */}\n      <section className=\"py-12\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"flex items-center justify-between mb-8\">\n            <div>\n              <h2 className=\"text-2xl lg:text-3xl font-bold text-foreground mb-2\">New Arrivals</h2>\n              <p className=\"text-muted-foreground\">Fresh styles just in</p>\n            </div>\n            <Link href=\"/products?sort=newest\">\n              <Button variant=\"outline\" data-testid=\"button-view-new-arrivals\">\n                View All\n              </Button>\n            </Link>\n          </div>\n          <ProductGrid limit={4} />\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":9256},"client/src/pages/landing.tsx":{"content":"import Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport ProductGrid from \"@/components/product/product-grid\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Link } from \"wouter\";\nimport { useState } from \"react\";\nimport { Search, ShoppingBag, Truck, Heart, Star, CheckCircle } from \"lucide-react\";\n\nexport default function Landing() {\n  const [trackingInput, setTrackingInput] = useState(\"\");\n\n  const categories = [\n    {\n      name: \"Men's Wear\",\n      image: \"https://images.unsplash.com/photo-1516826957135-700dedea698c?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n      count: \"5000+ Products\",\n    },\n    {\n      name: \"Women's Wear\", \n      image: \"https://images.unsplash.com/photo-1490481651871-ab68de25d43d?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n      count: \"7500+ Products\",\n    },\n    {\n      name: \"Kids Wear\",\n      image: \"https://images.unsplash.com/photo-1503944583220-79d8926ad5e2?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\", \n      count: \"2000+ Products\",\n    },\n    {\n      name: \"Accessories\",\n      image: \"https://images.unsplash.com/photo-1553062407-98eeb64c6a62?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n      count: \"1500+ Products\",\n    },\n  ];\n\n  const testimonials = [\n    {\n      name: \"Sarah Johnson\",\n      rating: 5,\n      comment: \"Amazing quality and fast delivery! The clothes fit perfectly and the customer service is outstanding.\",\n      image: \"https://images.unsplash.com/photo-1494790108755-2616b612b3e5?ixlib=rb-4.0.3&auto=format&fit=crop&w=150&h=150\"\n    },\n    {\n      name: \"Mike Chen\", \n      rating: 5,\n      comment: \"Love the variety and quality. The tracking system is so convenient and the mobile app makes shopping easy.\",\n      image: \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&auto=format&fit=crop&w=150&h=150\"\n    },\n    {\n      name: \"Emma Davis\",\n      rating: 5, \n      comment: \"Best online shopping experience! The return process is hassle-free and the clothes are exactly as shown.\",\n      image: \"https://images.unsplash.com/photo-1438761681033-6461ffad8d80?ixlib=rb-4.0.3&auto=format&fit=crop&w=150&h=150\"\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      {/* Hero Section */}\n      <section className=\"relative bg-gradient-to-r from-primary to-accent text-primary-foreground\">\n        <div className=\"container mx-auto px-4 py-16 lg:py-24\">\n          <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n            <div className=\"space-y-6\">\n              <h1 className=\"text-4xl lg:text-6xl font-bold leading-tight\">\n                Fashion That Speaks <span className=\"text-accent-foreground\">Your Style</span>\n              </h1>\n              <p className=\"text-xl text-primary-foreground/90\">\n                Discover the latest trends in clothing with fast delivery and easy returns. Shop from over 10,000+ styles.\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <Link href=\"/products\">\n                  <Button size=\"lg\" className=\"bg-accent text-accent-foreground hover:bg-accent/90 px-8 py-4 text-lg\" data-testid=\"button-shop-now\">\n                    Shop Now\n                  </Button>\n                </Link>\n                <Link href=\"/products\">\n                  <Button \n                    variant=\"outline\" \n                    size=\"lg\" \n                    className=\"border-primary-foreground text-primary-foreground hover:bg-primary-foreground hover:text-primary px-8 py-4 text-lg\"\n                    data-testid=\"button-view-collections\"\n                  >\n                    View Collections\n                  </Button>\n                </Link>\n              </div>\n            </div>\n            <div className=\"relative\">\n              <img \n                src=\"https://images.unsplash.com/photo-1483985988355-763728e1935b?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=900\" \n                alt=\"Fashion model wearing trendy outfit\" \n                className=\"rounded-2xl shadow-2xl w-full max-w-md mx-auto\"\n              />\n              <div className=\"absolute -bottom-6 -right-6 bg-card text-card-foreground p-4 rounded-xl shadow-lg\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"bg-primary/10 p-2 rounded-lg\">\n                    <Truck className=\"text-primary w-5 h-5\" />\n                  </div>\n                  <div>\n                    <p className=\"font-semibold\">Fast Delivery</p>\n                    <p className=\"text-sm text-muted-foreground\">2-3 days</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Category Grid */}\n      <section className=\"py-16 bg-secondary/30\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl lg:text-4xl font-bold text-foreground mb-4\">Shop by Category</h2>\n            <p className=\"text-lg text-muted-foreground\">Explore our wide range of fashion categories</p>\n          </div>\n\n          <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-6\">\n            {categories.map((category, index) => (\n              <Link key={index} href={`/products?category=${category.name.toLowerCase().replace(\"'s\", \"\").replace(\" \", \"_\")}`}>\n                <Card className=\"group cursor-pointer hover:shadow-lg transition-shadow\" data-testid={`card-category-${index}`}>\n                  <CardContent className=\"p-6 text-center\">\n                    <img \n                      src={category.image} \n                      alt={category.name} \n                      className=\"w-full h-48 object-cover rounded-xl mb-4\"\n                    />\n                    <h3 className=\"text-xl font-semibold text-foreground mb-2\">{category.name}</h3>\n                    <p className=\"text-muted-foreground\">{category.count}</p>\n                  </CardContent>\n                </Card>\n              </Link>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Featured Products */}\n      <section className=\"py-16\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"flex items-center justify-between mb-12\">\n            <div>\n              <h2 className=\"text-3xl lg:text-4xl font-bold text-foreground mb-4\">Trending Now</h2>\n              <p className=\"text-lg text-muted-foreground\">Discover what's popular this season</p>\n            </div>\n          </div>\n          <ProductGrid featured={true} limit={4} />\n          <div className=\"text-center mt-12\">\n            <Link href=\"/products\">\n              <Button variant=\"secondary\" size=\"lg\" data-testid=\"button-view-all\">\n                View All Products\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* Delivery Tracking */}\n      <section className=\"py-16 bg-gradient-to-r from-primary/5 to-accent/5\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl lg:text-4xl font-bold text-foreground mb-4\">Track Your Order</h2>\n            <p className=\"text-lg text-muted-foreground\">Real-time tracking for all your orders</p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n            <Card className=\"p-8 shadow-lg\">\n              <h3 className=\"text-2xl font-bold text-foreground mb-6\">Order Tracking</h3>\n              \n              <div className=\"space-y-4 mb-8\">\n                <div>\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">Order ID</label>\n                  <Input \n                    placeholder=\"Enter your order ID\" \n                    value={trackingInput}\n                    onChange={(e) => setTrackingInput(e.target.value)}\n                    data-testid=\"input-order-id\"\n                  />\n                </div>\n                <Link href={trackingInput ? `/track?order=${trackingInput}` : \"/track\"}>\n                  <Button className=\"w-full\" size=\"lg\" data-testid=\"button-track-order\">\n                    Track Order\n                  </Button>\n                </Link>\n              </div>\n\n              {/* Sample Tracking Steps */}\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between p-4 bg-secondary/50 rounded-lg\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"bg-primary p-2 rounded-full\">\n                      <CheckCircle className=\"text-primary-foreground w-4 h-4\" />\n                    </div>\n                    <div>\n                      <p className=\"font-medium text-foreground\">Order Confirmed</p>\n                      <p className=\"text-sm text-muted-foreground\">Order placed successfully</p>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center justify-between p-4 bg-secondary/50 rounded-lg\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"bg-primary p-2 rounded-full\">\n                      <ShoppingBag className=\"text-primary-foreground w-4 h-4\" />\n                    </div>\n                    <div>\n                      <p className=\"font-medium text-foreground\">Shipped</p>\n                      <p className=\"text-sm text-muted-foreground\">Package is on the way</p>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center justify-between p-4 bg-accent/10 rounded-lg border border-accent/20\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"bg-accent p-2 rounded-full animate-pulse\">\n                      <Truck className=\"text-accent-foreground w-4 h-4\" />\n                    </div>\n                    <div>\n                      <p className=\"font-medium text-foreground\">Out for Delivery</p>\n                      <p className=\"text-sm text-muted-foreground\">Expected delivery today</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </Card>\n\n            <div className=\"space-y-8\">\n              <img \n                src=\"https://images.unsplash.com/photo-1566576912321-d58ddd7a6088?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\" \n                alt=\"Delivery logistics and tracking\" \n                className=\"rounded-2xl shadow-lg w-full\"\n              />\n\n              <div className=\"grid grid-cols-2 gap-6\">\n                <Card className=\"p-6 text-center shadow-sm\">\n                  <div className=\"bg-primary/10 p-3 rounded-full w-fit mx-auto mb-3\">\n                    <Truck className=\"text-primary w-6 h-6\" />\n                  </div>\n                  <h4 className=\"font-semibold text-foreground mb-2\">Fast Delivery</h4>\n                  <p className=\"text-sm text-muted-foreground\">2-3 business days</p>\n                </Card>\n\n                <Card className=\"p-6 text-center shadow-sm\">\n                  <div className=\"bg-chart-2/10 p-3 rounded-full w-fit mx-auto mb-3\">\n                    <CheckCircle className=\"text-chart-2 w-6 h-6\" />\n                  </div>\n                  <h4 className=\"font-semibold text-foreground mb-2\">Easy Returns</h4>\n                  <p className=\"text-sm text-muted-foreground\">30-day return policy</p>\n                </Card>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Customer Testimonials */}\n      <section className=\"py-16\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl lg:text-4xl font-bold text-foreground mb-4\">What Our Customers Say</h2>\n            <p className=\"text-lg text-muted-foreground\">Join thousands of satisfied customers</p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            {testimonials.map((testimonial, index) => (\n              <Card key={index} className=\"p-6 shadow-sm\" data-testid={`card-testimonial-${index}`}>\n                <div className=\"flex items-center space-x-1 mb-4\">\n                  {[...Array(testimonial.rating)].map((_, i) => (\n                    <Star key={i} className=\"w-4 h-4 text-yellow-400 fill-current\" />\n                  ))}\n                </div>\n                <p className=\"text-foreground mb-4\">\"{testimonial.comment}\"</p>\n                <div className=\"flex items-center space-x-3\">\n                  <img \n                    src={testimonial.image} \n                    alt={testimonial.name} \n                    className=\"w-12 h-12 rounded-full object-cover\"\n                  />\n                  <div>\n                    <p className=\"font-semibold text-foreground\">{testimonial.name}</p>\n                    <p className=\"text-sm text-muted-foreground\">Verified Buyer</p>\n                  </div>\n                </div>\n              </Card>\n            ))}\n          </div>\n\n          <div className=\"text-center mt-12\">\n            <Card className=\"bg-secondary/30 p-8 max-w-4xl mx-auto\">\n              <div className=\"grid md:grid-cols-4 gap-8\">\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-primary mb-2\">50K+</div>\n                  <p className=\"text-sm text-muted-foreground\">Happy Customers</p>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-primary mb-2\">1M+</div>\n                  <p className=\"text-sm text-muted-foreground\">Orders Delivered</p>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-primary mb-2\">4.8</div>\n                  <p className=\"text-sm text-muted-foreground\">Average Rating</p>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-primary mb-2\">99%</div>\n                  <p className=\"text-sm text-muted-foreground\">Customer Satisfaction</p>\n                </div>\n              </div>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Mobile App Promotion */}\n      <section className=\"py-16 bg-gradient-to-r from-primary to-accent text-primary-foreground\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n            <div className=\"space-y-6\">\n              <h2 className=\"text-4xl lg:text-5xl font-bold leading-tight\">\n                Shop on the Go with Our Mobile App\n              </h2>\n              <p className=\"text-xl text-primary-foreground/90\">\n                Get exclusive app-only deals, faster checkout, and real-time order tracking. Download now and save 15% on your first order!\n              </p>\n              \n              <div className=\"space-y-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <CheckCircle className=\"text-accent-foreground w-5 h-5\" />\n                  <span>Exclusive app-only discounts</span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <CheckCircle className=\"text-accent-foreground w-5 h-5\" />\n                  <span>One-tap checkout and payment</span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <CheckCircle className=\"text-accent-foreground w-5 h-5\" />\n                  <span>Push notifications for order updates</span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <CheckCircle className=\"text-accent-foreground w-5 h-5\" />\n                  <span>Virtual try-on with AR technology</span>\n                </div>\n              </div>\n\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <Button variant=\"secondary\" className=\"px-6 py-3 text-sm\" data-testid=\"button-app-store\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"text-xl\">📱</div>\n                    <div className=\"text-left\">\n                      <div className=\"text-xs\">Download on the</div>\n                      <div className=\"text-sm font-bold\">App Store</div>\n                    </div>\n                  </div>\n                </Button>\n                <Button variant=\"secondary\" className=\"px-6 py-3 text-sm\" data-testid=\"button-google-play\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"text-xl\">🤖</div>\n                    <div className=\"text-left\">\n                      <div className=\"text-xs\">Get it on</div>\n                      <div className=\"text-sm font-bold\">Google Play</div>\n                    </div>\n                  </div>\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"relative\">\n              <img \n                src=\"https://images.unsplash.com/photo-1512941937669-90a1b58e7e9c?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=800\" \n                alt=\"Mobile app interface\" \n                className=\"rounded-3xl shadow-2xl max-w-md mx-auto\"\n              />\n              <div className=\"absolute -top-6 -left-6 bg-accent text-accent-foreground p-4 rounded-2xl shadow-lg\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold\">15%</div>\n                  <div className=\"text-sm\">OFF</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":18017},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/orders.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport OrderTracking from \"@/components/order/order-tracking\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ShoppingBag, Package, Truck, CheckCircle, Clock, X } from \"lucide-react\";\n\nexport default function Orders() {\n  const { user, isLoading, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const [selectedOrder, setSelectedOrder] = useState<string | null>(null);\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: orders = [], isLoading: ordersLoading } = useQuery({\n    queryKey: [\"/api/orders\"],\n    enabled: isAuthenticated,\n  });\n\n  if (isLoading || ordersLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"flex justify-center py-12\">\n          <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return <Clock className=\"w-4 h-4\" />;\n      case \"confirmed\":\n        return <CheckCircle className=\"w-4 h-4\" />;\n      case \"shipped\":\n        return <Package className=\"w-4 h-4\" />;\n      case \"out_for_delivery\":\n        return <Truck className=\"w-4 h-4\" />;\n      case \"delivered\":\n        return <CheckCircle className=\"w-4 h-4\" />;\n      case \"cancelled\":\n        return <X className=\"w-4 h-4\" />;\n      default:\n        return <Clock className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return \"bg-yellow-100 text-yellow-800\";\n      case \"confirmed\":\n        return \"bg-blue-100 text-blue-800\";\n      case \"shipped\":\n        return \"bg-purple-100 text-purple-800\";\n      case \"out_for_delivery\":\n        return \"bg-orange-100 text-orange-800\";\n      case \"delivered\":\n        return \"bg-green-100 text-green-800\";\n      case \"cancelled\":\n        return \"bg-red-100 text-red-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const activeOrders = orders.filter((order: any) => \n    ![\"delivered\", \"cancelled\"].includes(order.status)\n  );\n\n  const completedOrders = orders.filter((order: any) => \n    [\"delivered\", \"cancelled\"].includes(order.status)\n  );\n\n  if (orders.length === 0) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"container mx-auto px-4 py-16\">\n          <div className=\"max-w-md mx-auto text-center\">\n            <ShoppingBag className=\"w-24 h-24 text-muted-foreground mx-auto mb-6\" />\n            <h1 className=\"text-2xl font-bold text-foreground mb-4\">No Orders Yet</h1>\n            <p className=\"text-muted-foreground mb-8\">\n              You haven't placed any orders yet. Start shopping to see your orders here!\n            </p>\n            <Link href=\"/products\">\n              <Button size=\"lg\" data-testid=\"button-start-shopping\">\n                Start Shopping\n              </Button>\n            </Link>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-6xl mx-auto\">\n          <h1 className=\"text-3xl font-bold text-foreground mb-8\">My Orders</h1>\n          \n          <Tabs defaultValue=\"active\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"active\" data-testid=\"tab-active-orders\">\n                Active Orders ({activeOrders.length})\n              </TabsTrigger>\n              <TabsTrigger value=\"completed\" data-testid=\"tab-completed-orders\">\n                Completed Orders ({completedOrders.length})\n              </TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"active\" className=\"mt-8\">\n              <div className=\"space-y-6\">\n                {activeOrders.length === 0 ? (\n                  <Card>\n                    <CardContent className=\"p-12 text-center\">\n                      <Package className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n                      <h3 className=\"text-lg font-semibold text-foreground mb-2\">No Active Orders</h3>\n                      <p className=\"text-muted-foreground\">All your orders have been completed or cancelled.</p>\n                    </CardContent>\n                  </Card>\n                ) : (\n                  activeOrders.map((order: any, index: number) => (\n                    <Card key={order.id} className=\"hover:shadow-lg transition-shadow\" data-testid={`card-active-order-${index}`}>\n                      <CardHeader>\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <CardTitle className=\"text-lg\">Order #{order.orderNumber}</CardTitle>\n                            <p className=\"text-sm text-muted-foreground\">\n                              Placed on {new Date(order.createdAt).toLocaleDateString()}\n                            </p>\n                          </div>\n                          <Badge className={`${getStatusColor(order.status)} flex items-center space-x-1`}>\n                            {getStatusIcon(order.status)}\n                            <span className=\"capitalize\">{order.status.replace('_', ' ')}</span>\n                          </Badge>\n                        </div>\n                      </CardHeader>\n                      <CardContent className=\"space-y-4\">\n                        {/* Order Items */}\n                        <div className=\"grid gap-3\">\n                          {order.orderItems?.slice(0, 2).map((item: any, itemIndex: number) => (\n                            <div key={item.id} className=\"flex space-x-3\" data-testid={`order-item-${index}-${itemIndex}`}>\n                              <Link href={`/product/${item.product.id}`}>\n                                <img\n                                  src={item.product.imageUrl}\n                                  alt={item.product.name}\n                                  className=\"w-16 h-16 object-cover rounded-lg\"\n                                />\n                              </Link>\n                              <div className=\"flex-1\">\n                                <Link href={`/product/${item.product.id}`}>\n                                  <h4 className=\"font-medium text-foreground hover:text-primary transition-colors\">\n                                    {item.product.name}\n                                  </h4>\n                                </Link>\n                                <p className=\"text-sm text-muted-foreground\">{item.product.brand}</p>\n                                <div className=\"flex items-center justify-between mt-1\">\n                                  <div className=\"flex space-x-2\">\n                                    {item.size && (\n                                      <span className=\"text-xs bg-secondary px-2 py-1 rounded\">\n                                        Size: {item.size}\n                                      </span>\n                                    )}\n                                    {item.color && (\n                                      <span className=\"text-xs bg-secondary px-2 py-1 rounded\">\n                                        Color: {item.color}\n                                      </span>\n                                    )}\n                                  </div>\n                                  <div className=\"text-right\">\n                                    <p className=\"text-sm text-muted-foreground\">Qty: {item.quantity}</p>\n                                    <p className=\"font-medium\">₹{parseFloat(item.price).toLocaleString()}</p>\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                          ))}\n                          {order.orderItems?.length > 2 && (\n                            <p className=\"text-sm text-muted-foreground\">\n                              +{order.orderItems.length - 2} more items\n                            </p>\n                          )}\n                        </div>\n\n                        <Separator />\n\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <p className=\"font-semibold text-foreground\">\n                              Total: ₹{parseFloat(order.totalAmount).toLocaleString()}\n                            </p>\n                            {order.estimatedDelivery && (\n                              <p className=\"text-sm text-muted-foreground\">\n                                Expected delivery: {new Date(order.estimatedDelivery).toLocaleDateString()}\n                              </p>\n                            )}\n                          </div>\n                          <div className=\"flex space-x-2\">\n                            <Button\n                              variant=\"outline\"\n                              onClick={() => setSelectedOrder(order.id)}\n                              data-testid={`button-track-order-${index}`}\n                            >\n                              Track Order\n                            </Button>\n                            <Link href={`/orders/${order.id}`}>\n                              <Button variant=\"default\" data-testid={`button-view-details-${index}`}>\n                                View Details\n                              </Button>\n                            </Link>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))\n                )}\n              </div>\n            </TabsContent>\n            \n            <TabsContent value=\"completed\" className=\"mt-8\">\n              <div className=\"space-y-6\">\n                {completedOrders.length === 0 ? (\n                  <Card>\n                    <CardContent className=\"p-12 text-center\">\n                      <CheckCircle className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n                      <h3 className=\"text-lg font-semibold text-foreground mb-2\">No Completed Orders</h3>\n                      <p className=\"text-muted-foreground\">Your completed orders will appear here.</p>\n                    </CardContent>\n                  </Card>\n                ) : (\n                  completedOrders.map((order: any, index: number) => (\n                    <Card key={order.id} className=\"hover:shadow-lg transition-shadow\" data-testid={`card-completed-order-${index}`}>\n                      <CardHeader>\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <CardTitle className=\"text-lg\">Order #{order.orderNumber}</CardTitle>\n                            <p className=\"text-sm text-muted-foreground\">\n                              Placed on {new Date(order.createdAt).toLocaleDateString()}\n                            </p>\n                          </div>\n                          <Badge className={`${getStatusColor(order.status)} flex items-center space-x-1`}>\n                            {getStatusIcon(order.status)}\n                            <span className=\"capitalize\">{order.status.replace('_', ' ')}</span>\n                          </Badge>\n                        </div>\n                      </CardHeader>\n                      <CardContent className=\"space-y-4\">\n                        {/* Order Items */}\n                        <div className=\"grid gap-3\">\n                          {order.orderItems?.slice(0, 2).map((item: any, itemIndex: number) => (\n                            <div key={item.id} className=\"flex space-x-3\" data-testid={`completed-order-item-${index}-${itemIndex}`}>\n                              <Link href={`/product/${item.product.id}`}>\n                                <img\n                                  src={item.product.imageUrl}\n                                  alt={item.product.name}\n                                  className=\"w-16 h-16 object-cover rounded-lg\"\n                                />\n                              </Link>\n                              <div className=\"flex-1\">\n                                <Link href={`/product/${item.product.id}`}>\n                                  <h4 className=\"font-medium text-foreground hover:text-primary transition-colors\">\n                                    {item.product.name}\n                                  </h4>\n                                </Link>\n                                <p className=\"text-sm text-muted-foreground\">{item.product.brand}</p>\n                                <div className=\"flex items-center justify-between mt-1\">\n                                  <div className=\"flex space-x-2\">\n                                    {item.size && (\n                                      <span className=\"text-xs bg-secondary px-2 py-1 rounded\">\n                                        Size: {item.size}\n                                      </span>\n                                    )}\n                                    {item.color && (\n                                      <span className=\"text-xs bg-secondary px-2 py-1 rounded\">\n                                        Color: {item.color}\n                                      </span>\n                                    )}\n                                  </div>\n                                  <div className=\"text-right\">\n                                    <p className=\"text-sm text-muted-foreground\">Qty: {item.quantity}</p>\n                                    <p className=\"font-medium\">₹{parseFloat(item.price).toLocaleString()}</p>\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                          ))}\n                          {order.orderItems?.length > 2 && (\n                            <p className=\"text-sm text-muted-foreground\">\n                              +{order.orderItems.length - 2} more items\n                            </p>\n                          )}\n                        </div>\n\n                        <Separator />\n\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <p className=\"font-semibold text-foreground\">\n                              Total: ₹{parseFloat(order.totalAmount).toLocaleString()}\n                            </p>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {order.status === \"delivered\" ? \"Delivered\" : \"Cancelled\"} on{\" \"}\n                              {new Date(order.updatedAt).toLocaleDateString()}\n                            </p>\n                          </div>\n                          <div className=\"flex space-x-2\">\n                            {order.status === \"delivered\" && (\n                              <Link href={`/product/${order.orderItems[0]?.product.id}#reviews`}>\n                                <Button variant=\"outline\" data-testid={`button-write-review-${index}`}>\n                                  Write Review\n                                </Button>\n                              </Link>\n                            )}\n                            <Link href={`/orders/${order.id}`}>\n                              <Button variant=\"default\" data-testid={`button-view-completed-details-${index}`}>\n                                View Details\n                              </Button>\n                            </Link>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))\n                )}\n              </div>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n\n      {/* Order Tracking Modal */}\n      {selectedOrder && (\n        <OrderTracking\n          orderId={selectedOrder}\n          onClose={() => setSelectedOrder(null)}\n        />\n      )}\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":17257},"client/src/pages/product-detail.tsx":{"content":"import { useState } from \"react\";\nimport { useParams, Link } from \"wouter\";\nimport type { Product, Review, WishlistItem } from \"@shared/schema\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport ProductGrid from \"@/components/product/product-grid\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  Heart, \n  Star, \n  ShoppingCart, \n  Truck, \n  Shield, \n  RefreshCw, \n  Minus, \n  Plus,\n  Share\n} from \"lucide-react\";\n\nexport default function ProductDetail() {\n  const { id } = useParams();\n  const { user, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [selectedSize, setSelectedSize] = useState(\"\");\n  const [selectedColor, setSelectedColor] = useState(\"\");\n  const [quantity, setQuantity] = useState(1);\n  const [selectedImage, setSelectedImage] = useState(0);\n  const [reviewRating, setReviewRating] = useState(5);\n  const [reviewComment, setReviewComment] = useState(\"\");\n\n  const { data: product, isLoading } = useQuery<Product>({\n    queryKey: [`/api/products/${id}`],\n    enabled: !!id,\n  });\n\n  const { data: reviews = [] } = useQuery<Review[]>({\n    queryKey: [`/api/products/${id}/reviews`],\n    enabled: !!id,\n  });\n\n  const { data: wishlistItems = [] } = useQuery<(WishlistItem & { product: Product })[]>({\n    queryKey: [\"/api/wishlist\"],\n    enabled: isAuthenticated,\n  });\n\n  const isInWishlist = wishlistItems.some((item: any) => item.productId === id);\n\n  const addToCartMutation = useMutation({\n    mutationFn: async () => {\n      if (!selectedSize && product?.sizes && product.sizes.length > 0) {\n        throw new Error(\"Please select a size\");\n      }\n      if (!selectedColor && product?.colors && product.colors.length > 0) {\n        throw new Error(\"Please select a color\");\n      }\n      \n      return apiRequest(\"POST\", \"/api/cart\", {\n        productId: id,\n        quantity,\n        size: selectedSize || null,\n        color: selectedColor || null,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Added to Cart\",\n        description: \"Product has been added to your cart successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const toggleWishlistMutation = useMutation({\n    mutationFn: async () => {\n      if (isInWishlist) {\n        return apiRequest(\"DELETE\", `/api/wishlist/${id}`);\n      } else {\n        return apiRequest(\"POST\", \"/api/wishlist\", { productId: id });\n      }\n    },\n    onSuccess: () => {\n      toast({\n        title: isInWishlist ? \"Removed from Wishlist\" : \"Added to Wishlist\",\n        description: isInWishlist \n          ? \"Product removed from your wishlist.\" \n          : \"Product added to your wishlist.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/wishlist\"] });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update wishlist.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const addReviewMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(\"POST\", `/api/products/${id}/reviews`, {\n        rating: reviewRating,\n        comment: reviewComment,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Review Added\",\n        description: \"Thank you for your review!\",\n      });\n      setReviewComment(\"\");\n      setReviewRating(5);\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\", id, \"reviews\"] });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to add review.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"flex justify-center py-12\">\n          <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n        </div>\n      </div>\n    );\n  }\n\n  if (!product) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"container mx-auto px-4 py-12 text-center\">\n          <h1 className=\"text-2xl font-bold text-foreground mb-4\">Product Not Found</h1>\n          <Link href=\"/products\">\n            <Button>Continue Shopping</Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  const images = product.images || [product.imageUrl];\n  const currentPrice = product.salePrice ? parseFloat(product.salePrice) : parseFloat(product.price);\n  const originalPrice = parseFloat(product.price);\n  const discount = product.salePrice ? Math.round(((originalPrice - currentPrice) / originalPrice) * 100) : 0;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Breadcrumb */}\n        <nav className=\"mb-8\">\n          <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n            <Link href=\"/\" className=\"hover:text-primary\">Home</Link>\n            <span>/</span>\n            <Link href=\"/products\" className=\"hover:text-primary\">Products</Link>\n            <span>/</span>\n            <Link href={`/products?category=${product.category}`} className=\"hover:text-primary\">\n              {product.category}\n            </Link>\n            <span>/</span>\n            <span className=\"text-foreground\">{product.name}</span>\n          </div>\n        </nav>\n\n        <div className=\"grid lg:grid-cols-2 gap-12\">\n          {/* Product Images */}\n          <div className=\"space-y-4\">\n            <div className=\"aspect-square rounded-2xl overflow-hidden bg-secondary\">\n              <img\n                src={images[selectedImage]}\n                alt={product.name}\n                className=\"w-full h-full object-cover\"\n                data-testid=\"img-product-main\"\n              />\n            </div>\n            {images.length > 1 && (\n              <div className=\"grid grid-cols-4 gap-4\">\n                {images.map((image: string, index: number) => (\n                  <button\n                    key={index}\n                    onClick={() => setSelectedImage(index)}\n                    className={`aspect-square rounded-lg overflow-hidden border-2 transition-colors ${\n                      selectedImage === index ? 'border-primary' : 'border-border'\n                    }`}\n                    data-testid={`button-image-${index}`}\n                  >\n                    <img\n                      src={image}\n                      alt={`${product.name} ${index + 1}`}\n                      className=\"w-full h-full object-cover\"\n                    />\n                  </button>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Product Info */}\n          <div className=\"space-y-6\">\n            <div>\n              <p className=\"text-sm text-muted-foreground mb-2\">{product.brand}</p>\n              <h1 className=\"text-3xl font-bold text-foreground mb-4\" data-testid=\"text-product-name\">\n                {product.name}\n              </h1>\n              \n              <div className=\"flex items-center space-x-4 mb-4\">\n                <div className=\"flex items-center space-x-1\">\n                  <Star className=\"w-5 h-5 text-yellow-400 fill-current\" />\n                  <span className=\"font-medium\">{product.rating || \"0\"}</span>\n                  <span className=\"text-muted-foreground\">({product.reviewCount || 0} reviews)</span>\n                </div>\n                {product.isFeatured && (\n                  <Badge variant=\"secondary\">Featured</Badge>\n                )}\n              </div>\n\n              <div className=\"flex items-center space-x-4 mb-6\">\n                <span className=\"text-3xl font-bold text-foreground\" data-testid=\"text-product-price\">\n                  ₹{currentPrice.toLocaleString()}\n                </span>\n                {discount > 0 && (\n                  <>\n                    <span className=\"text-lg text-muted-foreground line-through\">\n                      ₹{originalPrice.toLocaleString()}\n                    </span>\n                    <Badge variant=\"destructive\">{discount}% OFF</Badge>\n                  </>\n                )}\n              </div>\n\n              <p className=\"text-muted-foreground leading-relaxed\" data-testid=\"text-product-description\">\n                {product.description}\n              </p>\n            </div>\n\n            {/* Size Selection */}\n            {product.sizes && product.sizes.length > 0 && (\n              <div>\n                <h3 className=\"font-semibold text-foreground mb-3\">Size</h3>\n                <div className=\"grid grid-cols-6 gap-2\">\n                  {product.sizes.map((size: string) => (\n                    <Button\n                      key={size}\n                      variant={selectedSize === size ? \"default\" : \"outline\"}\n                      className=\"aspect-square\"\n                      onClick={() => setSelectedSize(size)}\n                      data-testid={`button-size-${size}`}\n                    >\n                      {size}\n                    </Button>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Color Selection */}\n            {product.colors && product.colors.length > 0 && (\n              <div>\n                <h3 className=\"font-semibold text-foreground mb-3\">Color</h3>\n                <div className=\"flex flex-wrap gap-2\">\n                  {product.colors.map((color: string) => (\n                    <Button\n                      key={color}\n                      variant={selectedColor === color ? \"default\" : \"outline\"}\n                      onClick={() => setSelectedColor(color)}\n                      data-testid={`button-color-${color}`}\n                    >\n                      {color}\n                    </Button>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Quantity */}\n            <div>\n              <h3 className=\"font-semibold text-foreground mb-3\">Quantity</h3>\n              <div className=\"flex items-center space-x-3\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setQuantity(Math.max(1, quantity - 1))}\n                  disabled={quantity <= 1}\n                  data-testid=\"button-quantity-decrease\"\n                >\n                  <Minus className=\"w-4 h-4\" />\n                </Button>\n                <span className=\"text-lg font-medium w-12 text-center\" data-testid=\"text-quantity\">\n                  {quantity}\n                </span>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setQuantity(quantity + 1)}\n                  data-testid=\"button-quantity-increase\"\n                >\n                  <Plus className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"space-y-4\">\n              <div className=\"flex space-x-4\">\n                <Button\n                  size=\"lg\"\n                  className=\"flex-1\"\n                  onClick={() => addToCartMutation.mutate()}\n                  disabled={addToCartMutation.isPending}\n                  data-testid=\"button-add-to-cart\"\n                >\n                  <ShoppingCart className=\"w-5 h-5 mr-2\" />\n                  {addToCartMutation.isPending ? \"Adding...\" : \"Add to Cart\"}\n                </Button>\n                \n                {isAuthenticated && (\n                  <Button\n                    variant=\"outline\"\n                    size=\"lg\"\n                    onClick={() => toggleWishlistMutation.mutate()}\n                    disabled={toggleWishlistMutation.isPending}\n                    data-testid=\"button-toggle-wishlist\"\n                  >\n                    <Heart className={`w-5 h-5 ${isInWishlist ? 'fill-current text-destructive' : ''}`} />\n                  </Button>\n                )}\n\n                <Button variant=\"outline\" size=\"lg\" data-testid=\"button-share\">\n                  <Share className=\"w-5 h-5\" />\n                </Button>\n              </div>\n\n              {!isAuthenticated && (\n                <p className=\"text-sm text-muted-foreground text-center\">\n                  <a href=\"/api/login\" className=\"text-primary hover:underline\">Sign in</a> to add to wishlist\n                </p>\n              )}\n            </div>\n\n            {/* Features */}\n            <div className=\"grid grid-cols-3 gap-4 pt-6\">\n              <div className=\"text-center\">\n                <Truck className=\"w-8 h-8 text-primary mx-auto mb-2\" />\n                <p className=\"text-sm font-medium\">Free Delivery</p>\n                <p className=\"text-xs text-muted-foreground\">On orders above ₹999</p>\n              </div>\n              <div className=\"text-center\">\n                <RefreshCw className=\"w-8 h-8 text-primary mx-auto mb-2\" />\n                <p className=\"text-sm font-medium\">Easy Returns</p>\n                <p className=\"text-xs text-muted-foreground\">30-day return policy</p>\n              </div>\n              <div className=\"text-center\">\n                <Shield className=\"w-8 h-8 text-primary mx-auto mb-2\" />\n                <p className=\"text-sm font-medium\">Secure Payment</p>\n                <p className=\"text-xs text-muted-foreground\">100% secure checkout</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Product Details Tabs */}\n        <div className=\"mt-16\">\n          <Tabs defaultValue=\"details\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-3\">\n              <TabsTrigger value=\"details\">Product Details</TabsTrigger>\n              <TabsTrigger value=\"reviews\">Reviews ({reviews.length})</TabsTrigger>\n              <TabsTrigger value=\"shipping\">Shipping & Returns</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"details\" className=\"mt-8\">\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"space-y-4\">\n                    <div>\n                      <h3 className=\"font-semibold text-foreground mb-2\">Description</h3>\n                      <p className=\"text-muted-foreground leading-relaxed\">\n                        {product.description}\n                      </p>\n                    </div>\n                    \n                    <Separator />\n                    \n                    <div className=\"grid md:grid-cols-2 gap-6\">\n                      <div>\n                        <h4 className=\"font-medium text-foreground mb-3\">Product Information</h4>\n                        <dl className=\"space-y-2\">\n                          <div className=\"flex justify-between\">\n                            <dt className=\"text-muted-foreground\">Brand:</dt>\n                            <dd className=\"font-medium\">{product.brand}</dd>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <dt className=\"text-muted-foreground\">Category:</dt>\n                            <dd className=\"font-medium\">{product.category}</dd>\n                          </div>\n                          {product.subcategory && (\n                            <div className=\"flex justify-between\">\n                              <dt className=\"text-muted-foreground\">Type:</dt>\n                              <dd className=\"font-medium\">{product.subcategory}</dd>\n                            </div>\n                          )}\n                          <div className=\"flex justify-between\">\n                            <dt className=\"text-muted-foreground\">Stock:</dt>\n                            <dd className=\"font-medium\">{product.stock} available</dd>\n                          </div>\n                        </dl>\n                      </div>\n                      \n                      {((product.sizes && product.sizes.length > 0) || (product.colors && product.colors.length > 0)) && (\n                        <div>\n                          <h4 className=\"font-medium text-foreground mb-3\">Available Options</h4>\n                          {product.sizes && product.sizes.length > 0 && (\n                            <div className=\"mb-3\">\n                              <p className=\"text-sm text-muted-foreground mb-1\">Sizes:</p>\n                              <p className=\"font-medium\">{product.sizes?.join(\", \")}</p>\n                            </div>\n                          )}\n                          {product.colors && product.colors.length > 0 && (\n                            <div>\n                              <p className=\"text-sm text-muted-foreground mb-1\">Colors:</p>\n                              <p className=\"font-medium\">{product.colors.join(\", \")}</p>\n                            </div>\n                          )}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n            \n            <TabsContent value=\"reviews\" className=\"mt-8\">\n              <div className=\"space-y-6\">\n                {/* Add Review */}\n                {isAuthenticated && (\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <h3 className=\"font-semibold text-foreground mb-4\">Write a Review</h3>\n                      <div className=\"space-y-4\">\n                        <div>\n                          <label className=\"block text-sm font-medium text-foreground mb-2\">Rating</label>\n                          <Select value={reviewRating.toString()} onValueChange={(value) => setReviewRating(parseInt(value))}>\n                            <SelectTrigger className=\"w-32\" data-testid=\"select-review-rating\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {[5, 4, 3, 2, 1].map(rating => (\n                                <SelectItem key={rating} value={rating.toString()}>\n                                  <div className=\"flex items-center space-x-1\">\n                                    {[...Array(rating)].map((_, i) => (\n                                      <Star key={i} className=\"w-4 h-4 text-yellow-400 fill-current\" />\n                                    ))}\n                                    <span className=\"ml-2\">{rating} Star{rating !== 1 ? 's' : ''}</span>\n                                  </div>\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </div>\n                        \n                        <div>\n                          <label className=\"block text-sm font-medium text-foreground mb-2\">Comment</label>\n                          <Textarea\n                            placeholder=\"Share your experience with this product...\"\n                            value={reviewComment}\n                            onChange={(e) => setReviewComment(e.target.value)}\n                            data-testid=\"textarea-review-comment\"\n                          />\n                        </div>\n                        \n                        <Button \n                          onClick={() => addReviewMutation.mutate()}\n                          disabled={addReviewMutation.isPending || !reviewComment.trim()}\n                          data-testid=\"button-submit-review\"\n                        >\n                          {addReviewMutation.isPending ? \"Submitting...\" : \"Submit Review\"}\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n\n                {/* Reviews List */}\n                <div className=\"space-y-4\">\n                  {reviews.length === 0 ? (\n                    <Card>\n                      <CardContent className=\"p-6 text-center\">\n                        <p className=\"text-muted-foreground\">No reviews yet. Be the first to review this product!</p>\n                      </CardContent>\n                    </Card>\n                  ) : (\n                    reviews.map((review: any, index: number) => (\n                      <Card key={review.id}>\n                        <CardContent className=\"p-6\">\n                          <div className=\"flex items-start justify-between mb-3\">\n                            <div>\n                              <div className=\"flex items-center space-x-2 mb-1\">\n                                <span className=\"font-medium text-foreground\">\n                                  {review.user?.firstName} {review.user?.lastName}\n                                </span>\n                                <div className=\"flex items-center space-x-1\">\n                                  {[...Array(review.rating)].map((_, i) => (\n                                    <Star key={i} className=\"w-4 h-4 text-yellow-400 fill-current\" />\n                                  ))}\n                                </div>\n                              </div>\n                              <p className=\"text-sm text-muted-foreground\">\n                                {new Date(review.createdAt).toLocaleDateString()}\n                              </p>\n                            </div>\n                          </div>\n                          <p className=\"text-foreground\">{review.comment}</p>\n                        </CardContent>\n                      </Card>\n                    ))\n                  )}\n                </div>\n              </div>\n            </TabsContent>\n            \n            <TabsContent value=\"shipping\" className=\"mt-8\">\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"space-y-6\">\n                    <div>\n                      <h3 className=\"font-semibold text-foreground mb-3\">Shipping Information</h3>\n                      <ul className=\"space-y-2 text-muted-foreground\">\n                        <li>• Free delivery on orders above ₹999</li>\n                        <li>• Standard delivery: 2-3 business days</li>\n                        <li>• Express delivery: Next business day (additional charges apply)</li>\n                        <li>• We deliver Monday to Saturday (excluding holidays)</li>\n                      </ul>\n                    </div>\n                    \n                    <Separator />\n                    \n                    <div>\n                      <h3 className=\"font-semibold text-foreground mb-3\">Returns & Exchanges</h3>\n                      <ul className=\"space-y-2 text-muted-foreground\">\n                        <li>• 30-day return policy from date of delivery</li>\n                        <li>• Items must be in original condition with tags attached</li>\n                        <li>• Free return pickup available</li>\n                        <li>• Refunds processed within 5-7 business days</li>\n                        <li>• Exchanges subject to product availability</li>\n                      </ul>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n\n        {/* Related Products */}\n        <section className=\"mt-16\">\n          <h2 className=\"text-2xl font-bold text-foreground mb-8\">You Might Also Like</h2>\n          <ProductGrid category={product.category} excludeId={id} limit={4} />\n        </section>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":25529},"client/src/pages/products.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Product } from \"@shared/schema\";\nimport { useLocation } from \"wouter\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport ProductGrid from \"@/components/product/product-grid\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\nimport { Filter, Search, X, Grid, List } from \"lucide-react\";\n\nexport default function Products() {\n  const [location, navigate] = useLocation();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [category, setCategory] = useState(\"\");\n  const [subcategory, setSubcategory] = useState(\"\");\n  const [sortBy, setSortBy] = useState(\"newest\");\n  const [priceRange, setPriceRange] = useState([0, 10000]);\n  const [selectedSizes, setSelectedSizes] = useState<string[]>([]);\n  const [selectedColors, setSelectedColors] = useState<string[]>([]);\n  const [viewMode, setViewMode] = useState<\"grid\" | \"list\">(\"grid\");\n  const [showFilters, setShowFilters] = useState(false);\n\n  // Parse URL parameters\n  useEffect(() => {\n    const params = new URLSearchParams(location.split('?')[1] || '');\n    setSearchQuery(params.get('search') || '');\n    setCategory(params.get('category') || '');\n    setSubcategory(params.get('subcategory') || '');\n    setSortBy(params.get('sort') || 'newest');\n  }, [location]);\n\n  const { data: products = [], isLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/products\", { category, search: searchQuery, limit: 50 }],\n  });\n\n  const categories = [\n    { value: \"\", label: \"All Categories\" },\n    { value: \"men\", label: \"Men's Wear\" },\n    { value: \"women\", label: \"Women's Wear\" },\n    { value: \"kids\", label: \"Kids Wear\" },\n    { value: \"accessories\", label: \"Accessories\" },\n  ];\n\n  const subcategories = [\n    { value: \"\", label: \"All Items\" },\n    { value: \"shirts\", label: \"Shirts\" },\n    { value: \"pants\", label: \"Pants\" },\n    { value: \"dresses\", label: \"Dresses\" },\n    { value: \"shoes\", label: \"Shoes\" },\n    { value: \"bags\", label: \"Bags\" },\n  ];\n\n  const sizes = [\"XS\", \"S\", \"M\", \"L\", \"XL\", \"XXL\"];\n  const colors = [\"Black\", \"White\", \"Navy\", \"Gray\", \"Red\", \"Blue\", \"Green\", \"Pink\"];\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    updateFilters({ search: searchQuery });\n  };\n\n  const updateFilters = (newFilters: Record<string, string>) => {\n    const params = new URLSearchParams();\n    Object.entries({ category, subcategory, search: searchQuery, sort: sortBy, ...newFilters })\n      .forEach(([key, value]) => {\n        if (value) params.set(key, value);\n      });\n    navigate(`/products?${params.toString()}`);\n  };\n\n  const clearFilters = () => {\n    setSearchQuery(\"\");\n    setCategory(\"\");\n    setSubcategory(\"\");\n    setSortBy(\"newest\");\n    setPriceRange([0, 10000]);\n    setSelectedSizes([]);\n    setSelectedColors([]);\n    navigate(\"/products\");\n  };\n\n  const filteredProducts = products.filter((product: any) => {\n    const matchesPrice = parseFloat(product.price) >= priceRange[0] && parseFloat(product.price) <= priceRange[1];\n    const matchesSize = selectedSizes.length === 0 || selectedSizes.some(size => product.sizes?.includes(size));\n    const matchesColor = selectedColors.length === 0 || selectedColors.some(color => product.colors?.includes(color));\n    return matchesPrice && matchesSize && matchesColor;\n  });\n\n  const sortedProducts = [...filteredProducts].sort((a: any, b: any) => {\n    switch (sortBy) {\n      case \"price_low\":\n        return parseFloat(a.price) - parseFloat(b.price);\n      case \"price_high\":\n        return parseFloat(b.price) - parseFloat(a.price);\n      case \"rating\":\n        return parseFloat(b.rating || \"0\") - parseFloat(a.rating || \"0\");\n      case \"newest\":\n      default:\n        return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();\n    }\n  });\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Search and Filter Bar */}\n        <div className=\"mb-8\">\n          <div className=\"flex flex-col lg:flex-row gap-4 items-center justify-between\">\n            {/* Search */}\n            <form onSubmit={handleSearch} className=\"flex-1 max-w-md\">\n              <div className=\"relative\">\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search products...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pr-10\"\n                  data-testid=\"input-search-products\"\n                />\n                <Button\n                  type=\"submit\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-2 top-1/2 transform -translate-y-1/2\"\n                  data-testid=\"button-search-products\"\n                >\n                  <Search className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </form>\n\n            {/* Controls */}\n            <div className=\"flex items-center gap-4\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setShowFilters(!showFilters)}\n                className=\"lg:hidden\"\n                data-testid=\"button-toggle-filters\"\n              >\n                <Filter className=\"w-4 h-4 mr-2\" />\n                Filters\n              </Button>\n\n              <Select value={sortBy} onValueChange={(value) => { setSortBy(value); updateFilters({ sort: value }); }}>\n                <SelectTrigger className=\"w-48\" data-testid=\"select-sort\">\n                  <SelectValue placeholder=\"Sort by\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"newest\">Newest First</SelectItem>\n                  <SelectItem value=\"price_low\">Price: Low to High</SelectItem>\n                  <SelectItem value=\"price_high\">Price: High to Low</SelectItem>\n                  <SelectItem value=\"rating\">Highest Rated</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <div className=\"flex border rounded-lg\">\n                <Button\n                  variant={viewMode === \"grid\" ? \"default\" : \"ghost\"}\n                  size=\"sm\"\n                  onClick={() => setViewMode(\"grid\")}\n                  data-testid=\"button-grid-view\"\n                >\n                  <Grid className=\"w-4 h-4\" />\n                </Button>\n                <Button\n                  variant={viewMode === \"list\" ? \"default\" : \"ghost\"}\n                  size=\"sm\"\n                  onClick={() => setViewMode(\"list\")}\n                  data-testid=\"button-list-view\"\n                >\n                  <List className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          {/* Active Filters */}\n          {(category || subcategory || searchQuery || selectedSizes.length || selectedColors.length) && (\n            <div className=\"flex flex-wrap gap-2 mt-4\">\n              {category && (\n                <Badge variant=\"secondary\" className=\"flex items-center gap-2\">\n                  Category: {categories.find(c => c.value === category)?.label}\n                  <X className=\"w-3 h-3 cursor-pointer\" onClick={() => { setCategory(\"\"); updateFilters({ category: \"\" }); }} />\n                </Badge>\n              )}\n              {subcategory && (\n                <Badge variant=\"secondary\" className=\"flex items-center gap-2\">\n                  Type: {subcategories.find(s => s.value === subcategory)?.label}\n                  <X className=\"w-3 h-3 cursor-pointer\" onClick={() => { setSubcategory(\"\"); updateFilters({ subcategory: \"\" }); }} />\n                </Badge>\n              )}\n              {searchQuery && (\n                <Badge variant=\"secondary\" className=\"flex items-center gap-2\">\n                  Search: \"{searchQuery}\"\n                  <X className=\"w-3 h-3 cursor-pointer\" onClick={() => { setSearchQuery(\"\"); updateFilters({ search: \"\" }); }} />\n                </Badge>\n              )}\n              {selectedSizes.map(size => (\n                <Badge key={size} variant=\"secondary\" className=\"flex items-center gap-2\">\n                  Size: {size}\n                  <X className=\"w-3 h-3 cursor-pointer\" onClick={() => setSelectedSizes(prev => prev.filter(s => s !== size))} />\n                </Badge>\n              ))}\n              {selectedColors.map(color => (\n                <Badge key={color} variant=\"secondary\" className=\"flex items-center gap-2\">\n                  Color: {color}\n                  <X className=\"w-3 h-3 cursor-pointer\" onClick={() => setSelectedColors(prev => prev.filter(c => c !== color))} />\n                </Badge>\n              ))}\n              <Button variant=\"ghost\" size=\"sm\" onClick={clearFilters} data-testid=\"button-clear-filters\">\n                Clear All\n              </Button>\n            </div>\n          )}\n        </div>\n\n        <div className=\"flex gap-8\">\n          {/* Sidebar Filters */}\n          <div className={`lg:block ${showFilters ? 'block' : 'hidden'} w-full lg:w-64 space-y-6`}>\n            <Card>\n              <CardContent className=\"p-6 space-y-6\">\n                <div>\n                  <h3 className=\"font-semibold text-foreground mb-4\">Category</h3>\n                  <Select value={category} onValueChange={(value) => { setCategory(value); updateFilters({ category: value }); }}>\n                    <SelectTrigger data-testid=\"select-category\">\n                      <SelectValue placeholder=\"Select category\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {categories.map(cat => (\n                        <SelectItem key={cat.value} value={cat.value}>{cat.label}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <h3 className=\"font-semibold text-foreground mb-4\">Type</h3>\n                  <Select value={subcategory} onValueChange={(value) => { setSubcategory(value); updateFilters({ subcategory: value }); }}>\n                    <SelectTrigger data-testid=\"select-subcategory\">\n                      <SelectValue placeholder=\"Select type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {subcategories.map(subcat => (\n                        <SelectItem key={subcat.value} value={subcat.value}>{subcat.label}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <h3 className=\"font-semibold text-foreground mb-4\">Price Range</h3>\n                  <div className=\"space-y-3\">\n                    <Slider\n                      value={priceRange}\n                      onValueChange={setPriceRange}\n                      max={10000}\n                      step={100}\n                      className=\"w-full\"\n                      data-testid=\"slider-price-range\"\n                    />\n                    <div className=\"flex justify-between text-sm text-muted-foreground\">\n                      <span>₹{priceRange[0]}</span>\n                      <span>₹{priceRange[1]}</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"font-semibold text-foreground mb-4\">Size</h3>\n                  <div className=\"grid grid-cols-3 gap-2\">\n                    {sizes.map(size => (\n                      <div key={size} className=\"flex items-center space-x-2\">\n                        <Checkbox\n                          id={`size-${size}`}\n                          checked={selectedSizes.includes(size)}\n                          onCheckedChange={(checked) => {\n                            if (checked) {\n                              setSelectedSizes(prev => [...prev, size]);\n                            } else {\n                              setSelectedSizes(prev => prev.filter(s => s !== size));\n                            }\n                          }}\n                          data-testid={`checkbox-size-${size}`}\n                        />\n                        <Label htmlFor={`size-${size}`} className=\"text-sm\">{size}</Label>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"font-semibold text-foreground mb-4\">Color</h3>\n                  <div className=\"space-y-2\">\n                    {colors.map(color => (\n                      <div key={color} className=\"flex items-center space-x-2\">\n                        <Checkbox\n                          id={`color-${color}`}\n                          checked={selectedColors.includes(color)}\n                          onCheckedChange={(checked) => {\n                            if (checked) {\n                              setSelectedColors(prev => [...prev, color]);\n                            } else {\n                              setSelectedColors(prev => prev.filter(c => c !== color));\n                            }\n                          }}\n                          data-testid={`checkbox-color-${color}`}\n                        />\n                        <Label htmlFor={`color-${color}`} className=\"text-sm\">{color}</Label>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Products Grid */}\n          <div className=\"flex-1\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <p className=\"text-muted-foreground\">\n                Showing {sortedProducts.length} of {products.length} products\n              </p>\n            </div>\n\n            {isLoading ? (\n              <div className=\"flex justify-center py-12\">\n                <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n              </div>\n            ) : sortedProducts.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <p className=\"text-lg text-muted-foreground mb-4\">No products found</p>\n                <Button onClick={clearFilters} data-testid=\"button-clear-filters-empty\">\n                  Clear Filters\n                </Button>\n              </div>\n            ) : (\n              <ProductGrid products={sortedProducts} viewMode={viewMode} />\n            )}\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":15072},"client/src/pages/track-order.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  Package, \n  Truck, \n  CheckCircle, \n  Clock, \n  MapPin, \n  Search,\n  AlertCircle\n} from \"lucide-react\";\n\nexport default function TrackOrder() {\n  const [location] = useLocation();\n  const [orderNumber, setOrderNumber] = useState(\"\");\n  const [searchAttempted, setSearchAttempted] = useState(false);\n\n  // Parse URL parameters\n  useState(() => {\n    const params = new URLSearchParams(location.split('?')[1] || '');\n    const orderParam = params.get('order');\n    if (orderParam) {\n      setOrderNumber(orderParam);\n      setSearchAttempted(true);\n    }\n  });\n\n  const { data: order, isLoading, error } = useQuery({\n    queryKey: [\"/api/track\", orderNumber],\n    enabled: !!orderNumber && searchAttempted,\n  });\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (orderNumber.trim()) {\n      setSearchAttempted(true);\n    }\n  };\n\n  const getStatusIcon = (status: string, isActive: boolean) => {\n    const iconClass = `w-6 h-6 ${isActive ? 'text-primary' : 'text-muted-foreground'}`;\n    \n    switch (status) {\n      case \"pending\":\n      case \"confirmed\":\n        return <Clock className={iconClass} />;\n      case \"shipped\":\n        return <Package className={iconClass} />;\n      case \"out_for_delivery\":\n        return <Truck className={iconClass} />;\n      case \"delivered\":\n        return <CheckCircle className={iconClass} />;\n      default:\n        return <Clock className={iconClass} />;\n    }\n  };\n\n  const getStatusLabel = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return \"Order Placed\";\n      case \"confirmed\":\n        return \"Order Confirmed\";\n      case \"shipped\":\n        return \"Shipped\";\n      case \"out_for_delivery\":\n        return \"Out for Delivery\";\n      case \"delivered\":\n        return \"Delivered\";\n      default:\n        return status;\n    }\n  };\n\n  const trackingSteps = [\n    { status: \"pending\", label: \"Order Placed\" },\n    { status: \"confirmed\", label: \"Order Confirmed\" },\n    { status: \"shipped\", label: \"Shipped\" },\n    { status: \"out_for_delivery\", label: \"Out for Delivery\" },\n    { status: \"delivered\", label: \"Delivered\" },\n  ];\n\n  const getCurrentStepIndex = (currentStatus: string) => {\n    return trackingSteps.findIndex(step => step.status === currentStatus);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-3xl font-bold text-foreground mb-4\">Track Your Order</h1>\n            <p className=\"text-lg text-muted-foreground\">\n              Enter your order number to get real-time tracking information\n            </p>\n          </div>\n\n          {/* Search Form */}\n          <Card className=\"mb-8\">\n            <CardContent className=\"p-6\">\n              <form onSubmit={handleSearch} className=\"flex gap-4\">\n                <Input\n                  type=\"text\"\n                  placeholder=\"Enter order number (e.g., ORD-1234567890)\"\n                  value={orderNumber}\n                  onChange={(e) => setOrderNumber(e.target.value)}\n                  className=\"flex-1\"\n                  data-testid=\"input-order-number\"\n                />\n                <Button type=\"submit\" disabled={!orderNumber.trim()} data-testid=\"button-track-order\">\n                  <Search className=\"w-4 h-4 mr-2\" />\n                  Track Order\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n\n          {/* Loading State */}\n          {isLoading && (\n            <Card>\n              <CardContent className=\"p-12 text-center\">\n                <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\" />\n                <p className=\"text-muted-foreground\">Searching for your order...</p>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Error State */}\n          {error && searchAttempted && (\n            <Card>\n              <CardContent className=\"p-12 text-center\">\n                <AlertCircle className=\"w-16 h-16 text-destructive mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-foreground mb-2\">Order Not Found</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  We couldn't find an order with the number \"{orderNumber}\". \n                  Please check the order number and try again.\n                </p>\n                <p className=\"text-sm text-muted-foreground\">\n                  Order numbers usually start with \"ORD-\" followed by numbers and letters.\n                </p>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Order Found */}\n          {order && !isLoading && (\n            <div className=\"space-y-8\">\n              {/* Order Header */}\n              <Card>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <CardTitle className=\"text-2xl\">Order #{order.orderNumber}</CardTitle>\n                      <p className=\"text-muted-foreground\">\n                        Placed on {new Date(order.createdAt).toLocaleDateString()}\n                      </p>\n                    </div>\n                    <Badge \n                      variant=\"secondary\"\n                      className=\"text-lg px-4 py-2\"\n                      data-testid=\"text-order-status\"\n                    >\n                      {getStatusLabel(order.status)}\n                    </Badge>\n                  </div>\n                </CardHeader>\n              </Card>\n\n              {/* Tracking Timeline */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Package className=\"w-5 h-5\" />\n                    <span>Tracking Information</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-6\">\n                    {/* Progress Steps */}\n                    <div className=\"flex justify-between relative\">\n                      <div className=\"absolute top-6 left-6 right-6 h-0.5 bg-border\" />\n                      <div \n                        className=\"absolute top-6 left-6 h-0.5 bg-primary transition-all duration-500\"\n                        style={{ \n                          width: `${(getCurrentStepIndex(order.status) / (trackingSteps.length - 1)) * 100}%` \n                        }}\n                      />\n                      \n                      {trackingSteps.map((step, index) => {\n                        const isActive = getCurrentStepIndex(order.status) >= index;\n                        const isCurrent = order.status === step.status;\n                        \n                        return (\n                          <div key={step.status} className=\"flex flex-col items-center relative z-10\">\n                            <div \n                              className={`w-12 h-12 rounded-full border-2 flex items-center justify-center transition-colors ${\n                                isActive \n                                  ? 'bg-primary border-primary text-primary-foreground' \n                                  : 'bg-background border-border'\n                              }`}\n                              data-testid={`step-${step.status}`}\n                            >\n                              {getStatusIcon(step.status, isActive)}\n                            </div>\n                            <p className={`mt-2 text-sm font-medium ${isActive ? 'text-foreground' : 'text-muted-foreground'}`}>\n                              {step.label}\n                            </p>\n                            {isCurrent && (\n                              <p className=\"text-xs text-primary font-medium mt-1\">Current</p>\n                            )}\n                          </div>\n                        );\n                      })}\n                    </div>\n\n                    <Separator />\n\n                    {/* Tracking Events */}\n                    {order.tracking && order.tracking.length > 0 && (\n                      <div>\n                        <h3 className=\"font-semibold text-foreground mb-4\">Tracking History</h3>\n                        <div className=\"space-y-4\">\n                          {order.tracking.map((event: any, index: number) => (\n                            <div key={event.id} className=\"flex space-x-4\" data-testid={`tracking-event-${index}`}>\n                              <div className=\"flex-shrink-0\">\n                                <div className=\"w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center\">\n                                  {getStatusIcon(event.status, true)}\n                                </div>\n                              </div>\n                              <div className=\"flex-1\">\n                                <div className=\"flex items-center justify-between\">\n                                  <h4 className=\"font-medium text-foreground\">\n                                    {getStatusLabel(event.status)}\n                                  </h4>\n                                  <p className=\"text-sm text-muted-foreground\">\n                                    {new Date(event.timestamp).toLocaleString()}\n                                  </p>\n                                </div>\n                                {event.message && (\n                                  <p className=\"text-sm text-muted-foreground mt-1\">{event.message}</p>\n                                )}\n                                {event.location && (\n                                  <div className=\"flex items-center space-x-1 mt-1\">\n                                    <MapPin className=\"w-3 h-3 text-muted-foreground\" />\n                                    <p className=\"text-xs text-muted-foreground\">{event.location}</p>\n                                  </div>\n                                )}\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Order Details */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Order Details</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid md:grid-cols-2 gap-8\">\n                    {/* Shipping Address */}\n                    <div>\n                      <h3 className=\"font-semibold text-foreground mb-3\">Shipping Address</h3>\n                      <div className=\"text-sm text-muted-foreground space-y-1\">\n                        <p>{order.shippingAddress?.firstName} {order.shippingAddress?.lastName}</p>\n                        <p>{order.shippingAddress?.address}</p>\n                        <p>{order.shippingAddress?.city}, {order.shippingAddress?.state}</p>\n                        <p>{order.shippingAddress?.pincode}</p>\n                        <p>{order.shippingAddress?.phone}</p>\n                      </div>\n                    </div>\n\n                    {/* Order Summary */}\n                    <div>\n                      <h3 className=\"font-semibold text-foreground mb-3\">Order Summary</h3>\n                      <div className=\"space-y-2 text-sm\">\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-muted-foreground\">Payment Method:</span>\n                          <span className=\"capitalize\">{order.paymentMethod}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-muted-foreground\">Total Amount:</span>\n                          <span className=\"font-medium\">₹{parseFloat(order.totalAmount).toLocaleString()}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-muted-foreground\">Payment Status:</span>\n                          <Badge variant={order.paymentStatus === 'paid' ? 'default' : 'secondary'}>\n                            {order.paymentStatus}\n                          </Badge>\n                        </div>\n                        {order.estimatedDelivery && (\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-muted-foreground\">Expected Delivery:</span>\n                            <span>{new Date(order.estimatedDelivery).toLocaleDateString()}</span>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n\n                  <Separator className=\"my-6\" />\n\n                  {/* Order Items */}\n                  <div>\n                    <h3 className=\"font-semibold text-foreground mb-4\">\n                      Items ({order.orderItems?.length || 0})\n                    </h3>\n                    <div className=\"space-y-4\">\n                      {order.orderItems?.map((item: any, index: number) => (\n                        <div key={item.id} className=\"flex space-x-4\" data-testid={`order-item-${index}`}>\n                          <img\n                            src={item.product.imageUrl}\n                            alt={item.product.name}\n                            className=\"w-16 h-16 object-cover rounded-lg\"\n                          />\n                          <div className=\"flex-1\">\n                            <h4 className=\"font-medium text-foreground\">{item.product.name}</h4>\n                            <p className=\"text-sm text-muted-foreground\">{item.product.brand}</p>\n                            <div className=\"flex items-center space-x-4 mt-1\">\n                              {item.size && (\n                                <span className=\"text-xs bg-secondary px-2 py-1 rounded\">\n                                  Size: {item.size}\n                                </span>\n                              )}\n                              {item.color && (\n                                <span className=\"text-xs bg-secondary px-2 py-1 rounded\">\n                                  Color: {item.color}\n                                </span>\n                              )}\n                              <span className=\"text-sm text-muted-foreground\">Qty: {item.quantity}</span>\n                              <span className=\"font-medium\">₹{parseFloat(item.price).toLocaleString()}</span>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          )}\n\n          {/* Help Section */}\n          <Card className=\"mt-8\">\n            <CardContent className=\"p-6\">\n              <div className=\"text-center\">\n                <h3 className=\"font-semibold text-foreground mb-2\">Need Help?</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  If you have any questions about your order, feel free to contact our support team.\n                </p>\n                <div className=\"flex justify-center space-x-4\">\n                  <Button variant=\"outline\">Contact Support</Button>\n                  <Button variant=\"outline\">Track via SMS</Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":16268},"client/src/components/cart/cart-sidebar.tsx":{"content":"import { Link } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Sheet, SheetContent, SheetHeader, SheetTitle } from \"@/components/ui/sheet\";\nimport { ShoppingBag, Minus, Plus, Trash2, ArrowRight } from \"lucide-react\";\n\ninterface CartSidebarProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function CartSidebar({ open, onOpenChange }: CartSidebarProps) {\n  const { isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: cartItems = [], isLoading } = useQuery({\n    queryKey: [\"/api/cart\"],\n    enabled: isAuthenticated,\n  });\n\n  const updateQuantityMutation = useMutation({\n    mutationFn: async ({ id, quantity }: { id: string, quantity: number }) => {\n      return apiRequest(\"PUT\", `/api/cart/${id}`, { quantity });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update quantity.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const removeItemMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"DELETE\", `/api/cart/${id}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Item Removed\",\n        description: \"Item has been removed from your cart.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to remove item.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (!isAuthenticated) {\n    return (\n      <Sheet open={open} onOpenChange={onOpenChange}>\n        <SheetContent className=\"w-full max-w-md\">\n          <SheetHeader>\n            <SheetTitle className=\"flex items-center space-x-2\">\n              <ShoppingBag className=\"w-5 h-5\" />\n              <span>Shopping Cart</span>\n            </SheetTitle>\n          </SheetHeader>\n          <div className=\"flex flex-col items-center justify-center h-full\">\n            <ShoppingBag className=\"w-16 h-16 text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-semibold text-foreground mb-2\">Sign in to view cart</h3>\n            <p className=\"text-muted-foreground text-center mb-6\">\n              Please sign in to add items to your cart and checkout.\n            </p>\n            <Button onClick={() => window.location.href = \"/api/login\"} data-testid=\"button-sign-in-cart\">\n              Sign In\n            </Button>\n          </div>\n        </SheetContent>\n      </Sheet>\n    );\n  }\n\n  const subtotal = cartItems.reduce((sum: number, item: any) => {\n    const price = item.product.salePrice ? parseFloat(item.product.salePrice) : parseFloat(item.product.price);\n    return sum + (price * item.quantity);\n  }, 0);\n\n  const shipping = subtotal >= 999 ? 0 : 99;\n  const total = subtotal + shipping;\n\n  return (\n    <Sheet open={open} onOpenChange={onOpenChange}>\n      <SheetContent className=\"w-full max-w-md flex flex-col\">\n        <SheetHeader>\n          <SheetTitle className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <ShoppingBag className=\"w-5 h-5\" />\n              <span>Shopping Cart</span>\n            </div>\n            <Badge variant=\"secondary\">{cartItems.length} items</Badge>\n          </SheetTitle>\n        </SheetHeader>\n\n        {isLoading ? (\n          <div className=\"flex justify-center py-8\">\n            <div className=\"animate-spin w-6 h-6 border-4 border-primary border-t-transparent rounded-full\" />\n          </div>\n        ) : cartItems.length === 0 ? (\n          <div className=\"flex flex-col items-center justify-center flex-1\">\n            <ShoppingBag className=\"w-16 h-16 text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-semibold text-foreground mb-2\">Your cart is empty</h3>\n            <p className=\"text-muted-foreground text-center mb-6\">\n              Add some items to your cart to get started.\n            </p>\n            <Button onClick={() => onOpenChange(false)} data-testid=\"button-continue-shopping-empty\">\n              Continue Shopping\n            </Button>\n          </div>\n        ) : (\n          <>\n            {/* Cart Items */}\n            <div className=\"flex-1 overflow-y-auto space-y-4 py-4\">\n              {cartItems.map((item: any, index: number) => {\n                const product = item.product;\n                const currentPrice = product.salePrice ? parseFloat(product.salePrice) : parseFloat(product.price);\n                const originalPrice = parseFloat(product.price);\n                const discount = product.salePrice ? Math.round(((originalPrice - currentPrice) / originalPrice) * 100) : 0;\n\n                return (\n                  <div key={item.id} className=\"flex gap-3 p-3 bg-secondary/30 rounded-lg\" data-testid={`cart-item-${index}`}>\n                    <Link href={`/product/${product.id}`} onClick={() => onOpenChange(false)}>\n                      <img\n                        src={product.imageUrl}\n                        alt={product.name}\n                        className=\"w-16 h-16 object-cover rounded-lg\"\n                        data-testid={`cart-item-image-${index}`}\n                      />\n                    </Link>\n                    \n                    <div className=\"flex-1 min-w-0\">\n                      <Link href={`/product/${product.id}`} onClick={() => onOpenChange(false)}>\n                        <h4 className=\"font-medium text-foreground text-sm hover:text-primary transition-colors line-clamp-2\" data-testid={`cart-item-name-${index}`}>\n                          {product.name}\n                        </h4>\n                      </Link>\n                      <p className=\"text-xs text-muted-foreground\">{product.brand}</p>\n                      \n                      <div className=\"flex flex-wrap gap-1 mt-1\">\n                        {item.size && (\n                          <Badge variant=\"secondary\" className=\"text-xs\">Size: {item.size}</Badge>\n                        )}\n                        {item.color && (\n                          <Badge variant=\"secondary\" className=\"text-xs\">Color: {item.color}</Badge>\n                        )}\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between mt-2\">\n                        <div className=\"flex items-center space-x-1\">\n                          <span className=\"font-medium text-sm\" data-testid={`cart-item-price-${index}`}>\n                            ₹{currentPrice.toLocaleString()}\n                          </span>\n                          {discount > 0 && (\n                            <span className=\"text-xs text-muted-foreground line-through\">\n                              ₹{originalPrice.toLocaleString()}\n                            </span>\n                          )}\n                        </div>\n                        \n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => removeItemMutation.mutate(item.id)}\n                          disabled={removeItemMutation.isPending}\n                          data-testid={`cart-item-remove-${index}`}\n                        >\n                          <Trash2 className=\"w-3 h-3\" />\n                        </Button>\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-2 mt-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"h-6 w-6 p-0\"\n                          onClick={() => updateQuantityMutation.mutate({ id: item.id, quantity: Math.max(1, item.quantity - 1) })}\n                          disabled={item.quantity <= 1 || updateQuantityMutation.isPending}\n                          data-testid={`cart-item-decrease-${index}`}\n                        >\n                          <Minus className=\"w-3 h-3\" />\n                        </Button>\n                        <span className=\"text-sm font-medium w-8 text-center\" data-testid={`cart-item-quantity-${index}`}>\n                          {item.quantity}\n                        </span>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"h-6 w-6 p-0\"\n                          onClick={() => updateQuantityMutation.mutate({ id: item.id, quantity: item.quantity + 1 })}\n                          disabled={updateQuantityMutation.isPending}\n                          data-testid={`cart-item-increase-${index}`}\n                        >\n                          <Plus className=\"w-3 h-3\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n\n            {/* Cart Summary */}\n            <div className=\"border-t pt-4 space-y-4\">\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">Subtotal</span>\n                  <span data-testid=\"cart-subtotal\">₹{subtotal.toLocaleString()}</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">Shipping</span>\n                  <span data-testid=\"cart-shipping\">\n                    {shipping === 0 ? \"FREE\" : `₹${shipping}`}\n                  </span>\n                </div>\n                \n                {shipping > 0 && (\n                  <p className=\"text-xs text-muted-foreground bg-secondary p-2 rounded\">\n                    Add ₹{(999 - subtotal).toLocaleString()} more for FREE shipping!\n                  </p>\n                )}\n                \n                <Separator />\n                <div className=\"flex justify-between font-semibold\">\n                  <span>Total</span>\n                  <span data-testid=\"cart-total\">₹{total.toLocaleString()}</span>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Link href=\"/checkout\" onClick={() => onOpenChange(false)}>\n                  <Button size=\"lg\" className=\"w-full\" data-testid=\"button-checkout-cart\">\n                    Checkout\n                    <ArrowRight className=\"w-4 h-4 ml-2\" />\n                  </Button>\n                </Link>\n                <Link href=\"/cart\" onClick={() => onOpenChange(false)}>\n                  <Button variant=\"outline\" size=\"lg\" className=\"w-full\" data-testid=\"button-view-cart\">\n                    View Cart\n                  </Button>\n                </Link>\n              </div>\n            </div>\n          </>\n        )}\n      </SheetContent>\n    </Sheet>\n  );\n}\n","size_bytes":12006},"client/src/components/layout/footer.tsx":{"content":"import { Link } from \"wouter\";\nimport { ShoppingBag, Shield, Truck, RefreshCw } from \"lucide-react\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"bg-card border-t border-border\">\n      <div className=\"container mx-auto px-4 py-16\">\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-8\">\n          <div className=\"space-y-6\">\n            <Link href=\"/\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"bg-primary text-primary-foreground rounded-lg p-2\">\n                  <ShoppingBag className=\"w-5 h-5\" />\n                </div>\n                <span className=\"text-2xl font-bold text-primary\">StyleHub</span>\n              </div>\n            </Link>\n            <p className=\"text-muted-foreground\">\n              Your one-stop destination for trendy fashion. Quality clothing with fast delivery and exceptional customer service.\n            </p>\n            <div className=\"flex space-x-4\">\n              <a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\" data-testid=\"link-facebook\">\n                <svg className=\"w-6 h-6\" fill=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z\"/></svg>\n              </a>\n              <a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\" data-testid=\"link-instagram\">\n                <svg className=\"w-6 h-6\" fill=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z\"/></svg>\n              </a>\n              <a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\" data-testid=\"link-twitter\">\n                <svg className=\"w-6 h-6\" fill=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z\"/></svg>\n              </a>\n              <a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\" data-testid=\"link-youtube\">\n                <svg className=\"w-6 h-6\" fill=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M23.498 6.186a3.016 3.016 0 0 0-2.122-2.136C19.505 3.545 12 3.545 12 3.545s-7.505 0-9.377.505A3.017 3.017 0 0 0 .502 6.186C0 8.07 0 12 0 12s0 3.93.502 5.814a3.016 3.016 0 0 0 2.122 2.136c1.871.505 9.376.505 9.376.505s7.505 0 9.377-.505a3.015 3.015 0 0 0 2.122-2.136C24 15.93 24 12 24 12s0-3.93-.502-5.814zM9.545 15.568V8.432L15.818 12l-6.273 3.568z\"/></svg>\n              </a>\n            </div>\n          </div>\n\n          <div>\n            <h3 className=\"text-lg font-semibold text-foreground mb-6\">Shop</h3>\n            <ul className=\"space-y-3\">\n              <li><Link href=\"/products?category=men\" className=\"text-muted-foreground hover:text-primary transition-colors\">Men's Clothing</Link></li>\n              <li><Link href=\"/products?category=women\" className=\"text-muted-foreground hover:text-primary transition-colors\">Women's Clothing</Link></li>\n              <li><Link href=\"/products?category=kids\" className=\"text-muted-foreground hover:text-primary transition-colors\">Kids Wear</Link></li>\n              <li><Link href=\"/products?category=accessories\" className=\"text-muted-foreground hover:text-primary transition-colors\">Accessories</Link></li>\n              <li><Link href=\"/products?sale=true\" className=\"text-muted-foreground hover:text-primary transition-colors\">Sale Items</Link></li>\n              <li><Link href=\"/products?featured=true\" className=\"text-muted-foreground hover:text-primary transition-colors\">New Arrivals</Link></li>\n            </ul>\n          </div>\n\n          <div>\n            <h3 className=\"text-lg font-semibold text-foreground mb-6\">Customer Service</h3>\n            <ul className=\"space-y-3\">\n              <li><a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">Contact Us</a></li>\n              <li><Link href=\"/track\" className=\"text-muted-foreground hover:text-primary transition-colors\">Track Your Order</Link></li>\n              <li><a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">Returns & Exchanges</a></li>\n              <li><a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">Size Guide</a></li>\n              <li><a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">FAQ</a></li>\n              <li><a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">Shipping Info</a></li>\n            </ul>\n          </div>\n\n          <div>\n            <h3 className=\"text-lg font-semibold text-foreground mb-6\">Company</h3>\n            <ul className=\"space-y-3\">\n              <li><a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">About Us</a></li>\n              <li><a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">Careers</a></li>\n              <li><a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">Privacy Policy</a></li>\n              <li><a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">Terms of Service</a></li>\n              <li><a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">Sustainability</a></li>\n              <li><a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">Press</a></li>\n            </ul>\n          </div>\n        </div>\n\n        <div className=\"border-t border-border mt-12 pt-8\">\n          <div className=\"flex flex-col lg:flex-row justify-between items-center space-y-4 lg:space-y-0\">\n            <p className=\"text-muted-foreground text-sm\">\n              © 2025 StyleHub. All rights reserved.\n            </p>\n            <div className=\"flex items-center space-x-6\">\n              <div className=\"flex items-center space-x-2\">\n                <Shield className=\"w-4 h-4 text-primary\" />\n                <span className=\"text-sm text-muted-foreground\">Secure Shopping</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Truck className=\"w-4 h-4 text-primary\" />\n                <span className=\"text-sm text-muted-foreground\">Fast Delivery</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <RefreshCw className=\"w-4 h-4 text-primary\" />\n                <span className=\"text-sm text-muted-foreground\">Easy Returns</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":8238},"client/src/components/layout/header.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { \n  Search, \n  ShoppingBag, \n  Heart, \n  User, \n  Truck, \n  Menu,\n  ChevronDown\n} from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { CartItem, Product, WishlistItem } from \"@shared/schema\";\nimport CartSidebar from \"@/components/cart/cart-sidebar\";\n\nexport default function Header() {\n  const [location] = useLocation();\n  const { user, isAuthenticated } = useAuth();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [showCart, setShowCart] = useState(false);\n  const [showMobileMenu, setShowMobileMenu] = useState(false);\n\n  const { data: cartItems = [] } = useQuery<(CartItem & { product: Product })[]>({\n    queryKey: [\"/api/cart\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: wishlistItems = [] } = useQuery<(WishlistItem & { product: Product })[]>({\n    queryKey: [\"/api/wishlist\"], \n    enabled: isAuthenticated,\n  });\n\n  const cartItemCount = cartItems?.length || 0;\n  const wishlistCount = wishlistItems?.length || 0;\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (searchQuery.trim()) {\n      window.location.href = `/products?search=${encodeURIComponent(searchQuery)}`;\n    }\n  };\n\n  const categories = [\n    { name: \"Men\", value: \"men\" },\n    { name: \"Women\", value: \"women\" },\n    { name: \"Kids\", value: \"kids\" },\n    { name: \"Accessories\", value: \"accessories\" },\n  ];\n\n  return (\n    <>\n      {/* Top Banner */}\n      <div className=\"bg-primary text-primary-foreground py-2 px-4 text-sm text-center\">\n        <span className=\"font-medium\">Free Shipping on orders above ₹999 | Use code: FREESHIP</span>\n      </div>\n\n      {/* Main Header */}\n      <header className=\"bg-card border-b border-border sticky top-0 z-50 shadow-sm\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"flex items-center justify-between h-16\">\n            {/* Logo */}\n            <div className=\"flex items-center space-x-8\">\n              <Link href=\"/\">\n                <div className=\"flex items-center space-x-2\" data-testid=\"link-logo\">\n                  <div className=\"bg-primary text-primary-foreground rounded-lg p-2\">\n                    <ShoppingBag className=\"w-5 h-5\" />\n                  </div>\n                  <span className=\"text-2xl font-bold text-primary\">StyleHub</span>\n                </div>\n              </Link>\n\n              {/* Main Navigation */}\n              <nav className=\"hidden lg:flex items-center space-x-8\">\n                {categories.map((category) => (\n                  <DropdownMenu key={category.value}>\n                    <DropdownMenuTrigger asChild>\n                      <Button variant=\"ghost\" className=\"flex items-center space-x-1\" data-testid={`button-menu-${category.value}`}>\n                        <span className=\"font-medium\">{category.name}</span>\n                        <ChevronDown className=\"w-3 h-3\" />\n                      </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent>\n                      <DropdownMenuItem asChild>\n                        <Link href={`/products?category=${category.value}`}>\n                          All {category.name}\n                        </Link>\n                      </DropdownMenuItem>\n                      <DropdownMenuItem asChild>\n                        <Link href={`/products?category=${category.value}&subcategory=shirts`}>\n                          Shirts\n                        </Link>\n                      </DropdownMenuItem>\n                      <DropdownMenuItem asChild>\n                        <Link href={`/products?category=${category.value}&subcategory=pants`}>\n                          Pants\n                        </Link>\n                      </DropdownMenuItem>\n                      <DropdownMenuItem asChild>\n                        <Link href={`/products?category=${category.value}&subcategory=shoes`}>\n                          Shoes\n                        </Link>\n                      </DropdownMenuItem>\n                    </DropdownMenuContent>\n                  </DropdownMenu>\n                ))}\n                <Link href=\"/products?sale=true\">\n                  <Button variant=\"ghost\" className=\"font-medium text-accent hover:text-accent/80\" data-testid=\"link-sale\">\n                    Sale\n                  </Button>\n                </Link>\n              </nav>\n            </div>\n\n            {/* Search Bar */}\n            <div className=\"flex-1 max-w-xl mx-8 hidden md:block\">\n              <form onSubmit={handleSearch} className=\"relative\">\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search for clothing, brands and more...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"w-full bg-secondary pr-12\"\n                  data-testid=\"input-search\"\n                />\n                <Button\n                  type=\"submit\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-2 top-1/2 transform -translate-y-1/2\"\n                  data-testid=\"button-search\"\n                >\n                  <Search className=\"w-4 h-4\" />\n                </Button>\n              </form>\n            </div>\n\n            {/* Right Side Actions */}\n            <div className=\"flex items-center space-x-6\">\n              {/* Track Order */}\n              <Link href=\"/track\">\n                <Button variant=\"ghost\" className=\"hidden lg:flex items-center space-x-2\" data-testid=\"button-track\">\n                  <Truck className=\"w-5 h-5\" />\n                  <span className=\"font-medium\">Track</span>\n                </Button>\n              </Link>\n\n              {/* Account */}\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" className=\"flex items-center space-x-2\" data-testid=\"button-account\">\n                    <User className=\"w-5 h-5\" />\n                    <span className=\"hidden lg:inline font-medium\">\n                      {isAuthenticated ? user?.firstName || 'Account' : 'Account'}\n                    </span>\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\">\n                  {isAuthenticated ? (\n                    <>\n                      <DropdownMenuItem asChild>\n                        <Link href=\"/orders\">My Orders</Link>\n                      </DropdownMenuItem>\n                      <DropdownMenuItem asChild>\n                        <Link href=\"/profile\">Profile</Link>\n                      </DropdownMenuItem>\n                      {user?.isAdmin && (\n                        <DropdownMenuItem asChild>\n                          <Link href=\"/admin\">Admin Panel</Link>\n                        </DropdownMenuItem>\n                      )}\n                      <DropdownMenuItem>\n                        <a href=\"/api/logout\">Logout</a>\n                      </DropdownMenuItem>\n                    </>\n                  ) : (\n                    <DropdownMenuItem>\n                      <a href=\"/api/login\">Login</a>\n                    </DropdownMenuItem>\n                  )}\n                </DropdownMenuContent>\n              </DropdownMenu>\n\n              {/* Wishlist */}\n              {isAuthenticated && (\n                <Button variant=\"ghost\" className=\"relative\" data-testid=\"button-wishlist\">\n                  <Heart className=\"w-5 h-5\" />\n                  {wishlistCount > 0 && (\n                    <Badge variant=\"destructive\" className=\"absolute -top-2 -right-2 h-5 w-5 flex items-center justify-center text-xs\">\n                      {wishlistCount}\n                    </Badge>\n                  )}\n                </Button>\n              )}\n\n              {/* Cart */}\n              <Button \n                variant=\"ghost\" \n                className=\"relative\" \n                onClick={() => setShowCart(true)}\n                data-testid=\"button-cart\"\n              >\n                <ShoppingBag className=\"w-5 h-5\" />\n                {cartItemCount > 0 && (\n                  <Badge variant=\"destructive\" className=\"absolute -top-2 -right-2 h-5 w-5 flex items-center justify-center text-xs\">\n                    {cartItemCount}\n                  </Badge>\n                )}\n              </Button>\n\n              {/* Mobile Menu Toggle */}\n              <Sheet open={showMobileMenu} onOpenChange={setShowMobileMenu}>\n                <SheetTrigger asChild>\n                  <Button variant=\"ghost\" className=\"lg:hidden\" data-testid=\"button-mobile-menu\">\n                    <Menu className=\"w-5 h-5\" />\n                  </Button>\n                </SheetTrigger>\n                <SheetContent side=\"right\" className=\"w-full max-w-sm\">\n                  <div className=\"space-y-6\">\n                    {/* Mobile Search */}\n                    <form onSubmit={handleSearch} className=\"relative\">\n                      <Input\n                        type=\"text\"\n                        placeholder=\"Search...\"\n                        value={searchQuery}\n                        onChange={(e) => setSearchQuery(e.target.value)}\n                        className=\"pr-12\"\n                        data-testid=\"input-mobile-search\"\n                      />\n                      <Button\n                        type=\"submit\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"absolute right-2 top-1/2 transform -translate-y-1/2\"\n                      >\n                        <Search className=\"w-4 h-4\" />\n                      </Button>\n                    </form>\n\n                    {/* Mobile Navigation */}\n                    <nav className=\"space-y-4\">\n                      {categories.map((category) => (\n                        <Link \n                          key={category.value} \n                          href={`/products?category=${category.value}`}\n                          onClick={() => setShowMobileMenu(false)}\n                        >\n                          <Button variant=\"ghost\" className=\"w-full justify-start text-lg\" data-testid={`link-mobile-${category.value}`}>\n                            {category.name}\n                          </Button>\n                        </Link>\n                      ))}\n                      <Link href=\"/products?sale=true\" onClick={() => setShowMobileMenu(false)}>\n                        <Button variant=\"ghost\" className=\"w-full justify-start text-lg text-accent\">\n                          Sale\n                        </Button>\n                      </Link>\n                      <Link href=\"/track\" onClick={() => setShowMobileMenu(false)}>\n                        <Button variant=\"ghost\" className=\"w-full justify-start text-lg\">\n                          Track Order\n                        </Button>\n                      </Link>\n                    </nav>\n                  </div>\n                </SheetContent>\n              </Sheet>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Cart Sidebar */}\n      <CartSidebar open={showCart} onOpenChange={setShowCart} />\n    </>\n  );\n}\n","size_bytes":11681},"client/src/components/order/order-tracking.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { \n  Package, \n  Truck, \n  CheckCircle, \n  Clock, \n  MapPin,\n  AlertCircle\n} from \"lucide-react\";\n\ninterface OrderTrackingProps {\n  orderId: string;\n  onClose: () => void;\n}\n\nexport default function OrderTracking({ orderId, onClose }: OrderTrackingProps) {\n  const { data: order, isLoading, error } = useQuery({\n    queryKey: [\"/api/orders\", orderId],\n    enabled: !!orderId,\n  });\n\n  const getStatusIcon = (status: string, isActive: boolean) => {\n    const iconClass = `w-5 h-5 ${isActive ? 'text-primary' : 'text-muted-foreground'}`;\n    \n    switch (status) {\n      case \"pending\":\n      case \"confirmed\":\n        return <Clock className={iconClass} />;\n      case \"shipped\":\n        return <Package className={iconClass} />;\n      case \"out_for_delivery\":\n        return <Truck className={iconClass} />;\n      case \"delivered\":\n        return <CheckCircle className={iconClass} />;\n      default:\n        return <Clock className={iconClass} />;\n    }\n  };\n\n  const getStatusLabel = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return \"Order Placed\";\n      case \"confirmed\":\n        return \"Order Confirmed\";\n      case \"shipped\":\n        return \"Shipped\";\n      case \"out_for_delivery\":\n        return \"Out for Delivery\";\n      case \"delivered\":\n        return \"Delivered\";\n      default:\n        return status;\n    }\n  };\n\n  const trackingSteps = [\n    { status: \"pending\", label: \"Order Placed\" },\n    { status: \"confirmed\", label: \"Order Confirmed\" },\n    { status: \"shipped\", label: \"Shipped\" },\n    { status: \"out_for_delivery\", label: \"Out for Delivery\" },\n    { status: \"delivered\", label: \"Delivered\" },\n  ];\n\n  const getCurrentStepIndex = (currentStatus: string) => {\n    return trackingSteps.findIndex(step => step.status === currentStatus);\n  };\n\n  return (\n    <Dialog open={!!orderId} onOpenChange={() => onClose()}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <Package className=\"w-5 h-5\" />\n            <span>Order Tracking</span>\n          </DialogTitle>\n        </DialogHeader>\n\n        {isLoading && (\n          <div className=\"flex justify-center py-8\">\n            <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n          </div>\n        )}\n\n        {error && (\n          <Card>\n            <CardContent className=\"p-8 text-center\">\n              <AlertCircle className=\"w-12 h-12 text-destructive mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\">Order Not Found</h3>\n              <p className=\"text-muted-foreground\">\n                We couldn't find the details for this order. Please try again later.\n              </p>\n            </CardContent>\n          </Card>\n        )}\n\n        {order && !isLoading && (\n          <div className=\"space-y-6\">\n            {/* Order Header */}\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div>\n                    <h3 className=\"text-xl font-semibold text-foreground\">Order #{order.orderNumber}</h3>\n                    <p className=\"text-muted-foreground\">\n                      Placed on {new Date(order.createdAt).toLocaleDateString()}\n                    </p>\n                  </div>\n                  <Badge \n                    variant=\"secondary\"\n                    className=\"text-sm px-3 py-1\"\n                    data-testid=\"order-status-badge\"\n                  >\n                    {getStatusLabel(order.status)}\n                  </Badge>\n                </div>\n                \n                <div className=\"text-sm text-muted-foreground\">\n                  <p>Total Amount: <span className=\"font-medium text-foreground\">₹{parseFloat(order.totalAmount).toLocaleString()}</span></p>\n                  {order.estimatedDelivery && (\n                    <p>Expected Delivery: <span className=\"font-medium text-foreground\">{new Date(order.estimatedDelivery).toLocaleDateString()}</span></p>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Tracking Progress */}\n            <Card>\n              <CardContent className=\"p-6\">\n                <h4 className=\"font-semibold text-foreground mb-6\">Tracking Progress</h4>\n                \n                <div className=\"space-y-4\">\n                  {/* Progress Steps */}\n                  <div className=\"flex justify-between relative\">\n                    <div className=\"absolute top-5 left-5 right-5 h-0.5 bg-border\" />\n                    <div \n                      className=\"absolute top-5 left-5 h-0.5 bg-primary transition-all duration-500\"\n                      style={{ \n                        width: `${(getCurrentStepIndex(order.status) / (trackingSteps.length - 1)) * 100}%` \n                      }}\n                    />\n                    \n                    {trackingSteps.map((step, index) => {\n                      const isActive = getCurrentStepIndex(order.status) >= index;\n                      const isCurrent = order.status === step.status;\n                      \n                      return (\n                        <div key={step.status} className=\"flex flex-col items-center relative z-10\">\n                          <div \n                            className={`w-10 h-10 rounded-full border-2 flex items-center justify-center transition-colors ${\n                              isActive \n                                ? 'bg-primary border-primary text-primary-foreground' \n                                : 'bg-background border-border'\n                            }`}\n                            data-testid={`tracking-step-${step.status}`}\n                          >\n                            {getStatusIcon(step.status, isActive)}\n                          </div>\n                          <p className={`mt-2 text-xs font-medium text-center ${isActive ? 'text-foreground' : 'text-muted-foreground'}`}>\n                            {step.label}\n                          </p>\n                          {isCurrent && (\n                            <p className=\"text-xs text-primary font-medium mt-1\">Current</p>\n                          )}\n                        </div>\n                      );\n                    })}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Tracking Events */}\n            {order.tracking && order.tracking.length > 0 && (\n              <Card>\n                <CardContent className=\"p-6\">\n                  <h4 className=\"font-semibold text-foreground mb-4\">Tracking History</h4>\n                  <div className=\"space-y-4\">\n                    {order.tracking.map((event: any, index: number) => (\n                      <div key={event.id} className=\"flex space-x-4\" data-testid={`tracking-event-${index}`}>\n                        <div className=\"flex-shrink-0\">\n                          <div className=\"w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center\">\n                            {getStatusIcon(event.status, true)}\n                          </div>\n                        </div>\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center justify-between\">\n                            <h5 className=\"font-medium text-foreground\">\n                              {getStatusLabel(event.status)}\n                            </h5>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {new Date(event.timestamp).toLocaleString()}\n                            </p>\n                          </div>\n                          {event.message && (\n                            <p className=\"text-sm text-muted-foreground mt-1\">{event.message}</p>\n                          )}\n                          {event.location && (\n                            <div className=\"flex items-center space-x-1 mt-1\">\n                              <MapPin className=\"w-3 h-3 text-muted-foreground\" />\n                              <p className=\"text-xs text-muted-foreground\">{event.location}</p>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Order Items */}\n            {order.orderItems && order.orderItems.length > 0 && (\n              <Card>\n                <CardContent className=\"p-6\">\n                  <h4 className=\"font-semibold text-foreground mb-4\">\n                    Items in this order ({order.orderItems.length})\n                  </h4>\n                  <div className=\"space-y-4\">\n                    {order.orderItems.map((item: any, index: number) => (\n                      <div key={item.id} className=\"flex space-x-4\" data-testid={`order-item-${index}`}>\n                        <img\n                          src={item.product.imageUrl}\n                          alt={item.product.name}\n                          className=\"w-16 h-16 object-cover rounded-lg\"\n                        />\n                        <div className=\"flex-1\">\n                          <h5 className=\"font-medium text-foreground\">{item.product.name}</h5>\n                          <p className=\"text-sm text-muted-foreground\">{item.product.brand}</p>\n                          <div className=\"flex items-center space-x-4 mt-1\">\n                            {item.size && (\n                              <span className=\"text-xs bg-secondary px-2 py-1 rounded\">\n                                Size: {item.size}\n                              </span>\n                            )}\n                            {item.color && (\n                              <span className=\"text-xs bg-secondary px-2 py-1 rounded\">\n                                Color: {item.color}\n                              </span>\n                            )}\n                            <span className=\"text-sm text-muted-foreground\">Qty: {item.quantity}</span>\n                            <span className=\"font-medium\">₹{parseFloat(item.price).toLocaleString()}</span>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Shipping Address */}\n            {order.shippingAddress && (\n              <Card>\n                <CardContent className=\"p-6\">\n                  <h4 className=\"font-semibold text-foreground mb-4\">Delivery Address</h4>\n                  <div className=\"text-sm text-muted-foreground space-y-1\">\n                    <p className=\"font-medium text-foreground\">\n                      {order.shippingAddress.firstName} {order.shippingAddress.lastName}\n                    </p>\n                    <p>{order.shippingAddress.address}</p>\n                    <p>{order.shippingAddress.city}, {order.shippingAddress.state}</p>\n                    <p>{order.shippingAddress.pincode}</p>\n                    <p>{order.shippingAddress.phone}</p>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":11776},"client/src/components/product/product-card.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Heart, Star, ShoppingCart } from \"lucide-react\";\n\ninterface ProductCardProps {\n  product: any;\n  viewMode?: \"grid\" | \"list\";\n  className?: string;\n}\n\nexport default function ProductCard({ product, viewMode = \"grid\", className }: ProductCardProps) {\n  const { isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isHovered, setIsHovered] = useState(false);\n\n  const currentPrice = product.salePrice ? parseFloat(product.salePrice) : parseFloat(product.price);\n  const originalPrice = parseFloat(product.price);\n  const discount = product.salePrice ? Math.round(((originalPrice - currentPrice) / originalPrice) * 100) : 0;\n\n  const addToCartMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(\"POST\", \"/api/cart\", {\n        productId: product.id,\n        quantity: 1,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Added to Cart\",\n        description: \"Product has been added to your cart successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Please Sign In\",\n          description: \"You need to sign in to add items to cart.\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 1000);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to add item to cart.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const toggleWishlistMutation = useMutation({\n    mutationFn: async () => {\n      // For simplicity, always try to add to wishlist\n      return apiRequest(\"POST\", \"/api/wishlist\", { productId: product.id });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Added to Wishlist\",\n        description: \"Product has been added to your wishlist.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/wishlist\"] });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Please Sign In\",\n          description: \"You need to sign in to add items to wishlist.\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 1000);\n        return;\n      }\n      // If it fails, it might already be in wishlist, so try to remove\n      apiRequest(\"DELETE\", `/api/wishlist/${product.id}`)\n        .then(() => {\n          toast({\n            title: \"Removed from Wishlist\",\n            description: \"Product has been removed from your wishlist.\",\n          });\n          queryClient.invalidateQueries({ queryKey: [\"/api/wishlist\"] });\n        })\n        .catch(() => {\n          toast({\n            title: \"Error\",\n            description: \"Failed to update wishlist.\",\n            variant: \"destructive\",\n          });\n        });\n    },\n  });\n\n  if (viewMode === \"list\") {\n    return (\n      <Card className={`hover:shadow-lg transition-shadow ${className}`} data-testid=\"card-product-list\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex gap-6\">\n            <Link href={`/product/${product.id}`}>\n              <img\n                src={product.imageUrl}\n                alt={product.name}\n                className=\"w-32 h-32 object-cover rounded-lg\"\n                data-testid=\"img-product-list\"\n              />\n            </Link>\n            \n            <div className=\"flex-1 space-y-3\">\n              <div className=\"flex justify-between items-start\">\n                <div>\n                  <Link href={`/product/${product.id}`}>\n                    <h3 className=\"text-lg font-semibold text-foreground hover:text-primary transition-colors\" data-testid=\"text-product-name-list\">\n                      {product.name}\n                    </h3>\n                  </Link>\n                  <p className=\"text-sm text-muted-foreground\">{product.brand}</p>\n                  {product.description && (\n                    <p className=\"text-sm text-muted-foreground mt-2 line-clamp-2\">{product.description}</p>\n                  )}\n                </div>\n                \n                <div className=\"text-right\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <span className=\"text-xl font-bold text-foreground\" data-testid=\"text-product-price-list\">\n                      ₹{currentPrice.toLocaleString()}\n                    </span>\n                    {discount > 0 && (\n                      <>\n                        <span className=\"text-sm text-muted-foreground line-through\">\n                          ₹{originalPrice.toLocaleString()}\n                        </span>\n                        <Badge variant=\"destructive\" className=\"text-xs\">{discount}% OFF</Badge>\n                      </>\n                    )}\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-1 mb-3\">\n                    <Star className=\"w-4 h-4 text-yellow-400 fill-current\" />\n                    <span className=\"text-sm text-muted-foreground\">{product.rating || \"0\"} ({product.reviewCount || 0})</span>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex flex-wrap gap-2\">\n                  {product.isFeatured && <Badge>Featured</Badge>}\n                  {product.tags?.slice(0, 2).map((tag: string) => (\n                    <Badge key={tag} variant=\"secondary\" className=\"text-xs\">{tag}</Badge>\n                  ))}\n                </div>\n                \n                <div className=\"flex space-x-2\">\n                  {isAuthenticated && (\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => toggleWishlistMutation.mutate()}\n                      disabled={toggleWishlistMutation.isPending}\n                      data-testid=\"button-wishlist-list\"\n                    >\n                      <Heart className=\"w-4 h-4\" />\n                    </Button>\n                  )}\n                  <Button\n                    size=\"sm\"\n                    onClick={() => addToCartMutation.mutate()}\n                    disabled={addToCartMutation.isPending}\n                    data-testid=\"button-add-to-cart-list\"\n                  >\n                    <ShoppingCart className=\"w-4 h-4 mr-2\" />\n                    {addToCartMutation.isPending ? \"Adding...\" : \"Add to Cart\"}\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card \n      className={`group cursor-pointer hover:shadow-lg transition-all duration-300 ${className}`}\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n      data-testid=\"card-product-grid\"\n    >\n      <CardContent className=\"p-0\">\n        <div className=\"relative\">\n          <Link href={`/product/${product.id}`}>\n            <img\n              src={product.imageUrl}\n              alt={product.name}\n              className=\"w-full h-64 object-cover rounded-t-2xl group-hover:scale-105 transition-transform duration-300\"\n              data-testid=\"img-product-grid\"\n            />\n          </Link>\n          \n          {/* Overlay badges */}\n          <div className=\"absolute top-3 left-3 space-y-2\">\n            {discount > 0 && (\n              <Badge variant=\"destructive\" className=\"text-xs font-medium\">\n                -{discount}%\n              </Badge>\n            )}\n            {product.isFeatured && (\n              <Badge className=\"text-xs font-medium\">\n                Featured\n              </Badge>\n            )}\n            {product.tags?.includes(\"new\") && (\n              <Badge variant=\"secondary\" className=\"text-xs font-medium\">\n                New\n              </Badge>\n            )}\n          </div>\n          \n          {/* Wishlist button */}\n          {isAuthenticated && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className={`absolute top-3 right-3 bg-card/80 backdrop-blur-sm hover:bg-card transition-all duration-200 ${\n                isHovered ? 'opacity-100' : 'opacity-0'\n              }`}\n              onClick={(e) => {\n                e.preventDefault();\n                toggleWishlistMutation.mutate();\n              }}\n              disabled={toggleWishlistMutation.isPending}\n              data-testid=\"button-wishlist-grid\"\n            >\n              <Heart className=\"w-4 h-4\" />\n            </Button>\n          )}\n        </div>\n        \n        <div className=\"p-4\">\n          <Link href={`/product/${product.id}`}>\n            <h3 className=\"font-semibold text-foreground mb-2 group-hover:text-primary transition-colors line-clamp-2\" data-testid=\"text-product-name-grid\">\n              {product.name}\n            </h3>\n          </Link>\n          <p className=\"text-sm text-muted-foreground mb-3\">{product.brand}</p>\n          \n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-lg font-bold text-foreground\" data-testid=\"text-product-price-grid\">\n                ₹{currentPrice.toLocaleString()}\n              </span>\n              {discount > 0 && (\n                <span className=\"text-sm text-muted-foreground line-through\">\n                  ₹{originalPrice.toLocaleString()}\n                </span>\n              )}\n            </div>\n            <div className=\"flex items-center space-x-1\">\n              <Star className=\"w-4 h-4 text-yellow-400 fill-current\" />\n              <span className=\"text-sm text-muted-foreground\">{product.rating || \"0\"}</span>\n            </div>\n          </div>\n          \n          <Button\n            className=\"w-full\"\n            onClick={(e) => {\n              e.preventDefault();\n              addToCartMutation.mutate();\n            }}\n            disabled={addToCartMutation.isPending}\n            data-testid=\"button-add-to-cart-grid\"\n          >\n            {addToCartMutation.isPending ? \"Adding...\" : \"Add to Cart\"}\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":10913},"client/src/components/product/product-grid.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport ProductCard from \"./product-card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport type { Product } from \"@shared/schema\";\n\ninterface ProductGridProps {\n  category?: string;\n  search?: string;\n  featured?: boolean;\n  limit?: number;\n  offset?: number;\n  excludeId?: string;\n  products?: Product[];\n  viewMode?: \"grid\" | \"list\";\n  className?: string;\n}\n\nexport default function ProductGrid({\n  category,\n  search,\n  featured,\n  limit,\n  offset,\n  excludeId,\n  products: providedProducts,\n  viewMode = \"grid\",\n  className = \"\",\n}: ProductGridProps) {\n  const { data: fetchedProducts = [], isLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/products\", { category, search, featured, limit, offset }],\n    enabled: !providedProducts,\n  });\n\n  const products = providedProducts || fetchedProducts;\n  const filteredProducts = excludeId \n    ? products.filter((product) => product.id !== excludeId)\n    : products;\n\n  if (isLoading && !providedProducts) {\n    return (\n      <div className={`${\n        viewMode === \"grid\" \n          ? \"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\" \n          : \"space-y-4\"\n      } ${className}`}>\n        {Array.from({ length: limit || 8 }).map((_, index) => (\n          <div key={index} className=\"space-y-3\">\n            <Skeleton className={viewMode === \"grid\" ? \"h-64 w-full\" : \"h-32 w-32\"} />\n            <Skeleton className=\"h-4 w-3/4\" />\n            <Skeleton className=\"h-4 w-1/2\" />\n            <Skeleton className=\"h-10 w-full\" />\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  if (!products || filteredProducts.length === 0) {\n    return (\n      <div className=\"text-center py-12\">\n        <p className=\"text-lg text-muted-foreground mb-4\">No products found</p>\n        <p className=\"text-sm text-muted-foreground\">Try adjusting your search criteria</p>\n      </div>\n    );\n  }\n\n  return (\n    <div \n      className={`${\n        viewMode === \"grid\" \n          ? \"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\" \n          : \"space-y-4\"\n      } ${className}`}\n      data-testid=\"product-grid\"\n    >\n      {filteredProducts.map((product, index: number) => (\n        <ProductCard\n          key={product.id}\n          product={product}\n          viewMode={viewMode}\n          data-testid={`product-card-${index}`}\n        />\n      ))}\n    </div>\n  );\n}\n","size_bytes":2415},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}